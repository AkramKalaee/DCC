Input	followed_by	Concatenate()
Dense(512, use_bias=False)	call	Dense
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	call	Conv2D
range	has_arg0	1
BatchNormalization()	followed_by	Activation('relu')
Conv2D(num_channels // 8, (1, 1))	call	Conv2D
Activation	has_arg0	tanh
BatchNormalization()	followed_by	LeakyReLU(0.2)
Add()	call	Add
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
.tsgan_deconv_no_sn_loss_bias	call	GlobalAveragePooling2D()
data_generator	followed_by	range
.tsgan_deconv_no_sn_loss_bias	call	add_loss
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
zeros	followed_by	range
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Add()	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Dense	has_arg0	512
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Dense(1, use_bias=False)	followed_by	Model
Model	followed_by	Input
.tsgan_deconv_no_sn_loss_bias	call	Reshape((f_size, f_size, max_num_channels))
Adam	has_arg0	0.0002
shuffle	followed_by	Input
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	followed_by	BatchNormalization()
.tsgan_deconv_no_sn_loss_bias	call	mean
Conv2DTranspose	has_arg0	(5, 5)
Conv2D(num_channels, (1, 1))	call	Conv2D
.tsgan_deconv_no_sn_loss_bias	call	Adam
add_loss	followed_by	Adam
.tsgan_deconv_no_sn_loss_bias	call	Model
Conv2D	has_padding	same
BatchNormalization()	call	BatchNormalization
Conv2DTranspose	has_arg0	3
Adam	followed_by	Concatenate()
Dense(512, use_bias=False)	followed_by	LeakyReLU(0.2)
Input	followed_by	range
.tsgan_deconv_no_sn_loss_bias	call	Dense(1, use_bias=False)
Concatenate()	call	Concatenate
.tsgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
mean	call	log_sigmoid
range	followed_by	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
Model	followed_by	mean
reshape	has_arg0	(f_size, f_size, max_num_channels)
.tsgan_deconv_no_sn_loss_bias	call	Dense(f_size ** 2 * max_num_channels)
.tsgan_deconv_no_sn_loss_bias	call	data_generator
Conv2D	has_arg0	(1, 1)
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels // 8, (1, 1))
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
mean	followed_by	add_loss
.tsgan_deconv_no_sn_loss_bias	call	Dense(512, use_bias=False)
.tsgan_deconv_no_sn_loss_bias	call	shuffle
Activation	has_arg0	relu
Input	has_shape	(z_dim,)
Conv2D(num_channels, (1, 1))	followed_by	Add()
LeakyReLU(0.2)	call	LeakyReLU
Concatenate()	followed_by	Model
Add()	followed_by	GlobalAveragePooling2D()
sample	call	zeros
.tsgan_deconv_no_sn_loss_bias	call	Add()
Conv2DTranspose	has_arg1	(5, 5)
LeakyReLU(0.2)	followed_by	Conv2D(num_channels // 8, (1, 1))
Activation('tanh')	followed_by	Model
.tsgan_deconv_no_sn_loss_bias	call	range
Input	has_shape	(img_dim, img_dim, 3)
.tsgan_deconv_no_sn_loss_bias	call	Input
Dense(f_size ** 2 * max_num_channels)	call	Dense
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
Concatenate()	followed_by	Concatenate()
GlobalAveragePooling2D()	followed_by	Model
Dense(1, use_bias=False)	call	Dense
range	has_arg0	2
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels, (1, 1))
Adam	has_arg1	0.5
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (1, 1))
.tsgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Conv2D	has_arg0	(5, 5)
range	followed_by	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
range	followed_by	range
.tsgan_deconv_no_sn_loss_bias	call	BatchNormalization()
.tsgan_deconv_no_sn_loss_bias	call	Activation('relu')
LeakyReLU	has_arg0	0.2
.tsgan_deconv_no_sn_loss_bias	call	sample
Activation('tanh')	call	Activation
.tsgan_deconv_no_sn_loss_bias	call	Concatenate()
Input	followed_by	Dense(512, use_bias=False)
sample	call	range
.tsgan_deconv_no_sn_loss_bias	call	LeakyReLU(0.2)
Adam	followed_by	data_generator
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Activation('relu')	call	Activation
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
log_sigmoid	followed_by	log_sigmoid
Reshape((f_size, f_size, max_num_channels))	call	reshape
range	followed_by	sample
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Input	followed_by	Input
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels // 8, (1, 1))
Conv2DTranspose	has_padding	same
.tsgan_deconv_no_sn_loss_bias	call	Activation('tanh')
Dense	has_arg0	1
Input	has_shape	(K.int_shape(x)[-1] * 2,)
LeakyReLU(0.2)	followed_by	Dense(1, use_bias=False)
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
Activation('relu')	followed_by	Conv2D(num_channels // 8, (1, 1))
Activation	has_arg0	tanh
Add()	call	Add
.t_sagan_u_celeba	call	Conv2D(num_channels, (1, 1))
.t_sagan_u_celeba	call	Activation('tanh')
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
.t_sagan_u_celeba	call	Input
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Reshape((f_size, f_size, max_num_channels))	call	reshape
data_generator	followed_by	range
mean	call	log_sigmoid
Conv2D(num_channels, (1, 1))	call	Conv2D
Conv2D(3, (4, 4), padding='same')	call	Conv2D
sample	call	zeros
range	followed_by	sample
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
reshape	has_arg0	(f_size, f_size, max_num_channels)
.t_sagan_u_celeba	call	UpSampling2D()
.t_sagan_u_celeba	call	shuffle
Activation('tanh')	call	Activation
Adam	has_arg1	0.5
Input	has_shape	(z_dim,)
.t_sagan_u_celeba	call	LeakyReLU(0.2)
.t_sagan_u_celeba	call	Dense(f_size ** 2 * max_num_channels)
Input	followed_by	Input
LeakyReLU(0.2)	followed_by	Add()
log_sigmoid	followed_by	log_sigmoid
.t_sagan_u_celeba	call	Add()
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels // 8, (1, 1))
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sagan_u_celeba	call	Reshape((f_size, f_size, max_num_channels))
Conv2D	has_arg0	(1, 1)
GlobalAveragePooling2D()	followed_by	Model
.t_sagan_u_celeba	call	Subtract()
Activation('relu')	call	Activation
.t_sagan_u_celeba	call	range
Input	has_shape	(K.int_shape(x)[-1],)
add_loss	followed_by	Adam
UpSampling2D()	followed_by	Conv2D(num_channels, (4, 4), padding='same')
Dense(f_size ** 2 * max_num_channels)	call	Dense
shuffle	followed_by	Input
Conv2D	has_arg1	(4, 4)
Conv2D	has_arg0	3
Model	followed_by	Input
Subtract()	call	Subtract
mean	followed_by	add_loss
.t_sagan_u_celeba	call	Conv2D(num_channels, (4, 4), padding='same')
.t_sagan_u_celeba	call	Activation('relu')
zeros	followed_by	range
Conv2D	has_arg0	(4, 4)
.t_sagan_u_celeba	call	BatchNormalization()
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
range	followed_by	LeakyReLU(0.2)
Conv2D	has_padding	same
Activation('tanh')	followed_by	Model
Activation	has_arg0	relu
Add()	followed_by	GlobalAveragePooling2D()
Subtract()	followed_by	Model
sample	call	range
.t_sagan_u_celeba	call	mean
.t_sagan_u_celeba	call	GlobalAveragePooling2D()
range	followed_by	UpSampling2D()
.t_sagan_u_celeba	call	Model
UpSampling2D()	followed_by	Conv2D(3, (4, 4), padding='same')
Add()	followed_by	UpSampling2D()
Activation('relu')	followed_by	Conv2D(num_channels // 8, (1, 1))
LeakyReLU(0.2)	call	LeakyReLU
BatchNormalization()	followed_by	Activation('relu')
.t_sagan_u_celeba	call	Adam
LeakyReLU	has_arg0	0.2
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels, (1, 1))
Adam	followed_by	data_generator
Input	followed_by	Model
Conv2D(num_channels // 8, (1, 1))	call	Conv2D
.t_sagan_u_celeba	call	add_loss
Adam	has_arg0	0.0002
Conv2D(num_channels, (1, 1))	followed_by	Add()
Conv2D(num_channels, (4, 4), padding='same')	call	Conv2D
Conv2D(num_channels, (4, 4), padding='same')	followed_by	BatchNormalization()
Subtract()	followed_by	Subtract()
range	followed_by	range
range	has_arg0	2
Model	followed_by	mean
Conv2D(3, (4, 4), padding='same')	followed_by	Activation('tanh')
BatchNormalization()	call	BatchNormalization
.t_sagan_u_celeba	call	Conv2D(3, (4, 4), padding='same')
Input	followed_by	range
.t_sagan_u_celeba	call	sample
.t_sagan_u_celeba	call	data_generator
Input	followed_by	Subtract()
Input	has_shape	(img_dim, img_dim, 3)
Adam	followed_by	Subtract()
.t_sagan_u_celeba	call	Conv2D(num_channels // 8, (1, 1))
UpSampling2D()	call	UpSampling2D
range	has_arg0	1
.fid_keras	call	distance
FID.__init__	call	get_mu_sigma
get_mu_sigma	followed_by	sqrtm
real	call	trace
distance	call	get_mu_sigma
sqrtm	followed_by	real
FID.__init__	followed_by	distance
distance	call	sqrtm
mean	has_arg0	0
get_mu_sigma	call	mean
distance	call	real
.fid_keras	call	FID.__init__
.t_sgan_sn_upsample	call	shuffle
Input	followed_by	LeakyReLU(0.2)
.t_sgan_sn_upsample	call	LeakyReLU(0.2)
Activation('tanh')	call	Activation
data_generator	followed_by	range
Conv2D(num_channels, (4, 4), padding='same')	followed_by	BatchNormalization()
.t_sgan_sn_upsample	call	sample
Activation	has_arg0	tanh
Model	followed_by	mean
.t_sgan_sn_upsample	call	UpSampling2D()
mean	followed_by	add_loss
shuffle	followed_by	Input
LeakyReLU(0.2)	call	LeakyReLU
Dense(f_size ** 2 * max_num_channels)	call	Dense
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Conv2D(num_channels, (4, 4), padding='same')	call	Conv2D
Adam	followed_by	Subtract()
Adam	has_arg1	0.5
.t_sgan_sn_upsample	call	BatchNormalization()
sample	call	zeros
.t_sgan_sn_upsample	call	data_generator
Activation('tanh')	followed_by	Model
Conv2D(3, (4, 4), padding='same')	followed_by	Activation('tanh')
range	has_arg0	1
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
.t_sgan_sn_upsample	call	Subtract()
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
BatchNormalization()	call	BatchNormalization
.t_sgan_sn_upsample	call	Activation('tanh')
range	followed_by	UpSampling2D()
Input	has_shape	(z_dim,)
range	followed_by	LeakyReLU(0.2)
Conv2D	has_arg0	(4, 4)
.t_sgan_sn_upsample	call	Adam
Conv2D	has_arg1	(4, 4)
Adam	followed_by	data_generator
range	followed_by	range
.t_sgan_sn_upsample	call	mean
Model	followed_by	Input
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
BatchNormalization()	followed_by	Activation('relu')
range	has_arg0	2
LeakyReLU(0.2)	followed_by	Model
GlobalAveragePooling2D()	followed_by	Model
.t_sgan_sn_upsample	call	Reshape((f_size, f_size, max_num_channels))
Activation('relu')	call	Activation
UpSampling2D()	followed_by	Conv2D(3, (4, 4), padding='same')
UpSampling2D()	followed_by	Conv2D(num_channels, (4, 4), padding='same')
.t_sgan_sn_upsample	call	GlobalAveragePooling2D()
Adam	has_arg0	0.0002
UpSampling2D()	call	UpSampling2D
reshape	has_arg0	(f_size, f_size, max_num_channels)
Input	followed_by	Subtract()
.t_sgan_sn_upsample	call	Input
.t_sgan_sn_upsample	call	Activation('relu')
mean	call	log_sigmoid
Conv2D(3, (4, 4), padding='same')	call	Conv2D
.t_sgan_sn_upsample	call	Conv2D(3, (4, 4), padding='same')
Subtract()	followed_by	Subtract()
LeakyReLU	has_arg0	0.2
Conv2D	has_arg0	3
.t_sgan_sn_upsample	call	Conv2D(num_channels, (4, 4), padding='same')
Input	has_shape	(K.int_shape(x)[-1],)
Input	has_shape	(img_dim, img_dim, 3)
.t_sgan_sn_upsample	call	Model
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
log_sigmoid	followed_by	log_sigmoid
Activation	has_arg0	relu
sample	call	range
zeros	followed_by	range
Conv2D	has_padding	same
range	followed_by	sample
Input	followed_by	Input
Subtract()	followed_by	Model
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
add_loss	followed_by	Adam
Input	followed_by	range
Subtract()	call	Subtract
.t_sgan_sn_upsample	call	range
.t_sgan_sn_upsample	call	Dense(f_size ** 2 * max_num_channels)
Activation('relu')	followed_by	UpSampling2D()
.t_sgan_sn_upsample	call	add_loss
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Reshape((f_size, f_size, max_num_channels))	call	reshape
.t_sgan_sn_celeba_64	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
Adam	followed_by	Subtract()
Dense	has_activation	sigmoid
Adam	has_arg1	0.5
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
GlobalAveragePooling2D()	followed_by	Model
Input	has_shape	(K.int_shape(x)[-1],)
Conv2DTranspose	has_padding	same
.t_sgan_sn_celeba_64	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Adam	has_arg0	0.0002
Conv2D	has_arg0	(5, 5)
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
.t_sgan_sn_celeba_64	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.t_sgan_sn_celeba_64	call	sample
Conv2DTranspose	has_arg0	3
LeakyReLU()	followed_by	range
sample	call	range
Activation('relu')	call	Activation
Reshape((4, 4, img_dim * 8))	call	reshape
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
Input	followed_by	Subtract()
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
reshape	has_arg0	(4, 4, img_dim * 8)
.t_sgan_sn_celeba_64	call	LeakyReLU()
.t_sgan_sn_celeba_64	call	Input
.t_sgan_sn_celeba_64	call	Reshape((4, 4, img_dim * 8))
.t_sgan_sn_celeba_64	call	Activation('relu')
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	followed_by	LeakyReLU()
Input	followed_by	Dense(4 * 4 * img_dim * 8)
.t_sgan_sn_celeba_64	call	BatchNormalization()
mean	followed_by	add_loss
Activation('tanh')	call	Activation
.t_sgan_sn_celeba_64	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
.t_sgan_sn_celeba_64	call	GlobalAveragePooling2D()
Subtract()	call	Subtract
.t_sgan_sn_celeba_64	call	Adam
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
range	has_arg0	2
Model	followed_by	mean
range	followed_by	range
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
.t_sgan_sn_celeba_64	call	Model
Activation	has_arg0	tanh
Dense	has_arg0	1
Reshape((4, 4, img_dim * 8))	followed_by	range
Subtract()	followed_by	Subtract()
Subtract()	followed_by	Model
.t_sgan_sn_celeba_64	call	Dense(512, kernel_constraint=spectral_normalization)
Dense	has_arg0	512
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
.t_sgan_sn_celeba_64	call	range
Activation	has_arg0	relu
Activation('tanh')	followed_by	Model
range	has_arg0	3
.t_sgan_sn_celeba_64	call	data_generator
.t_sgan_sn_celeba_64	call	Dense(4 * 4 * img_dim * 8)
range	has_arg0	1
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
LeakyReLU()	call	LeakyReLU
zeros	followed_by	range
Model	followed_by	Input
log	followed_by	log
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
BatchNormalization()	call	BatchNormalization
Input	followed_by	Input
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
sample	call	zeros
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
LeakyReLU()	followed_by	GlobalAveragePooling2D()
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
.t_sgan_sn_celeba_64	call	Subtract()
.t_sgan_sn_celeba_64	call	BatchNormalization(gamma_constraint=spectral_normalization)
BatchNormalization()	followed_by	Activation('relu')
.t_sgan_sn_celeba_64	call	mean
.t_sgan_sn_celeba_64	call	add_loss
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sgan_sn_celeba_64	call	shuffle
mean	call	log
Adam	followed_by	data_generator
Conv2DTranspose	has_arg1	(5, 5)
.t_sgan_sn_celeba_64	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
.t_sgan_sn_celeba_64	call	Activation('tanh')
add_loss	followed_by	Adam
shuffle	followed_by	Input
Dense(4 * 4 * img_dim * 8)	call	Dense
data_generator	followed_by	range
Conv2DTranspose	has_arg0	(5, 5)
range	followed_by	sample
Input	has_shape	(z_dim,)
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	call	Conv2D
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Input	has_shape	(img_dim, img_dim, 3)
Dense	has_arg0	512
Adam	has_arg0	0.0002
LeakyReLU()	followed_by	GlobalAveragePooling2D()
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Activation	has_arg0	relu
Input	has_shape	(K.int_shape(x)[-1],)
Dense(4 * 4 * img_dim * 8)	call	Dense
.t_sgan_sn_celeba_256	call	Activation('tanh')
sample	call	range
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Activation('tanh')	followed_by	Model
Model	followed_by	mean
.t_sgan_sn_celeba_256	call	Input
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
BatchNormalization()	call	BatchNormalization
Input	followed_by	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Conv2DTranspose	has_arg0	3
Dense	has_activation	sigmoid
mean	followed_by	add_loss
.t_sgan_sn_celeba_256	call	Reshape((4, 4, img_dim * 8))
Adam	has_arg1	0.5
Reshape((4, 4, img_dim * 8))	followed_by	range
Adam	followed_by	data_generator
data_generator	followed_by	range
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
.t_sgan_sn_celeba_256	call	shuffle
Conv2DTranspose	has_padding	same
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Input	followed_by	Subtract()
.t_sgan_sn_celeba_256	call	LeakyReLU()
Adam	followed_by	Subtract()
.t_sgan_sn_celeba_256	call	Activation('relu')
Conv2DTranspose	has_arg0	(5, 5)
Subtract()	followed_by	Subtract()
Subtract()	call	Subtract
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
range	has_arg0	4
.t_sgan_sn_celeba_256	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Subtract()	followed_by	Model
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_256	call	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_celeba_256	call	Dense(4 * 4 * img_dim * 8)
Activation	has_arg0	tanh
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sgan_sn_celeba_256	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
.t_sgan_sn_celeba_256	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
log	followed_by	log
range	followed_by	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Activation('relu')	call	Activation
zeros	followed_by	range
.t_sgan_sn_celeba_256	call	Dense(512, kernel_constraint=spectral_normalization)
.t_sgan_sn_celeba_256	call	mean
Model	followed_by	Input
range	has_arg0	1
BatchNormalization()	followed_by	Activation('relu')
.t_sgan_sn_celeba_256	call	sample
.t_sgan_sn_celeba_256	call	GlobalAveragePooling2D()
Conv2DTranspose	has_arg1	(5, 5)
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
shuffle	followed_by	Input
range	followed_by	range
LeakyReLU()	followed_by	range
.t_sgan_sn_celeba_256	call	BatchNormalization()
Reshape((4, 4, img_dim * 8))	call	reshape
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_celeba_256	call	Model
reshape	has_arg0	(4, 4, img_dim * 8)
range	followed_by	sample
Input	has_shape	(z_dim,)
Input	followed_by	Input
mean	call	log
.t_sgan_sn_celeba_256	call	range
.t_sgan_sn_celeba_256	call	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
sample	call	zeros
Dense	has_arg0	1
.t_sgan_sn_celeba_256	call	add_loss
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_256	call	data_generator
LeakyReLU()	call	LeakyReLU
range	has_arg0	5
range	has_arg0	2
range	has_arg0	8501
Input	has_shape	(img_dim, img_dim, 3)
.t_sgan_sn_celeba_256	call	Adam
add_loss	followed_by	Adam
.t_sgan_sn_celeba_256	call	Subtract()
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Conv2D	has_arg0	(5, 5)
Activation('tanh')	call	Activation
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_sgan_sn_celeba_256	call	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
GlobalAveragePooling2D()	followed_by	Model
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
.t_sagan_celeba	call	GlobalAveragePooling2D()
Adam	followed_by	Subtract()
Adam	followed_by	data_generator
.t_sagan_celeba	call	UpSampling2D()
shuffle	followed_by	Input
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Adam	has_arg1	0.5
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
range	followed_by	UpSampling2D()
.t_sagan_celeba	call	ZeroPadding2D()
Activation('relu')	followed_by	UpSampling2D()
.t_sagan_celeba	call	LeakyReLU(0.2)
.t_sagan_celeba	call	Activation('tanh')
.t_sagan_celeba	call	Adam
ZeroPadding2D()	followed_by	LeakyReLU(0.2)
ZeroPadding2D()	followed_by	Activation('tanh')
Input	followed_by	Subtract()
.t_sagan_celeba	call	shuffle
Subtract()	call	Subtract
.t_sagan_celeba	call	mean
LeakyReLU(0.2)	followed_by	Add()
UpSampling2D()	followed_by	ZeroPadding2D()
Input	followed_by	Input
Activation('relu')	call	Activation
LeakyReLU(0.2)	followed_by	range
Input	followed_by	Reshape((1, 1, z_dim))
BatchNormalization()	followed_by	Activation('relu')
sample	call	zeros
Subtract()	followed_by	Model
.t_sagan_celeba	call	add_loss
Activation	has_arg0	relu
range	followed_by	range
Reshape((1, 1, z_dim))	call	reshape
.t_sagan_celeba	call	Model
.t_sagan_celeba	call	Activation('relu')
Activation('relu')	followed_by	Add()
mean	followed_by	add_loss
LeakyReLU(0.2)	call	LeakyReLU
Input	has_shape	(K.int_shape(x)[-1],)
.t_sagan_celeba	call	Reshape((1, 1, z_dim))
Input	has_shape	(z_dim,)
BatchNormalization()	call	BatchNormalization
Model	followed_by	mean
Model	followed_by	Input
mean	call	log_sigmoid
ZeroPadding2D()	call	ZeroPadding2D
range	followed_by	ZeroPadding2D()
Input	followed_by	ZeroPadding2D()
GlobalAveragePooling2D()	followed_by	Model
ZeroPadding2D()	followed_by	BatchNormalization()
range	followed_by	sample
zeros	followed_by	range
Activation('relu')	followed_by	range
Activation('tanh')	call	Activation
.t_sagan_celeba	call	Add()
.t_sagan_celeba	call	range
Adam	has_arg0	0.0002
.t_sagan_celeba	call	Input
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
log_sigmoid	followed_by	log_sigmoid
.t_sagan_celeba	call	Subtract()
.t_sagan_celeba	call	data_generator
Activation('tanh')	followed_by	Model
Subtract()	followed_by	Subtract()
add_loss	followed_by	Adam
.t_sagan_celeba	call	BatchNormalization()
Input	followed_by	Model
data_generator	followed_by	range
.t_sagan_celeba	call	sample
Activation	has_arg0	tanh
range	has_arg0	2
Reshape((1, 1, z_dim))	followed_by	BatchNormalization()
UpSampling2D()	call	UpSampling2D
range	has_arg0	1
reshape	has_arg0	(1, 1, z_dim)
Add()	followed_by	range
Input	has_shape	(img_dim, img_dim, 3)
LeakyReLU	has_arg0	0.2
Add()	call	Add
sample	call	range
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
Input	followed_by	range
Adam	has_arg0	0.0002
range	has_arg0	1
.t_sgan_sn_deconv	call	Reshape((f_size, f_size, max_num_channels))
BatchNormalization()	followed_by	Activation('relu')
Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')	call	Conv2DTranspose
range	followed_by	Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')
Activation	has_arg0	relu
Subtract()	followed_by	Model
BatchNormalization()	call	BatchNormalization
Adam	has_arg1	0.5
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
LeakyReLU(0.2)	call	LeakyReLU
.t_sgan_sn_deconv	call	Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')
Activation	has_arg0	tanh
mean	call	log_sigmoid
.t_sgan_sn_deconv	call	BatchNormalization()
Dense(f_size ** 2 * max_num_channels)	call	Dense
add_loss	followed_by	Adam
.t_sgan_sn_deconv	call	shuffle
data_generator	followed_by	range
mean	followed_by	add_loss
.t_sgan_sn_deconv	call	Model
LeakyReLU(0.2)	followed_by	Model
Input	has_shape	(z_dim,)
Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
.t_sgan_sn_deconv	call	GlobalAveragePooling2D()
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
.t_sgan_sn_deconv	call	Activation('tanh')
Input	has_shape	(K.int_shape(x)[-1],)
.t_sgan_sn_deconv	call	Dense(f_size ** 2 * max_num_channels)
reshape	has_arg0	(f_size, f_size, max_num_channels)
Input	has_shape	(img_dim, img_dim, 3)
sample	call	zeros
Model	followed_by	mean
Conv2DTranspose	has_arg0	(4, 4)
.t_sgan_sn_deconv	call	range
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
range	has_arg0	2
Input	followed_by	Input
.t_sgan_sn_deconv	call	add_loss
.t_sgan_sn_deconv	call	sample
Adam	followed_by	data_generator
Activation('tanh')	call	Activation
.t_sgan_sn_deconv	call	Activation('relu')
.t_sgan_sn_deconv	call	mean
Conv2DTranspose	has_arg1	(4, 4)
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
range	followed_by	sample
.t_sgan_sn_deconv	call	LeakyReLU(0.2)
Input	followed_by	Subtract()
Adam	followed_by	Subtract()
range	followed_by	range
.t_sgan_sn_deconv	call	Subtract()
Input	followed_by	LeakyReLU(0.2)
Activation('tanh')	followed_by	Model
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Reshape((f_size, f_size, max_num_channels))	call	reshape
.t_sgan_sn_deconv	call	Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')
zeros	followed_by	range
shuffle	followed_by	Input
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Activation('relu')	followed_by	Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')
GlobalAveragePooling2D()	followed_by	Model
Conv2DTranspose	has_padding	same
Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Activation('relu')	call	Activation
Model	followed_by	Input
Subtract()	call	Subtract
Conv2DTranspose	has_arg0	3
range	followed_by	LeakyReLU(0.2)
Subtract()	followed_by	Subtract()
Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')	call	Conv2DTranspose
sample	call	range
.t_sgan_sn_deconv	call	Input
.t_sgan_sn_deconv	call	Adam
.t_sgan_sn_deconv	call	data_generator
LeakyReLU	has_arg0	0.2
log_sigmoid	followed_by	log_sigmoid
sample	call	zeros
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Input	has_shape	(img_dim, img_dim, 3)
LeakyReLU()	followed_by	range
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Conv2DTranspose	has_padding	same
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
Subtract()	followed_by	Model
GlobalAveragePooling2D()	followed_by	Model
.t_wgan_sn_celeba_64	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
shuffle	followed_by	Input
.t_wgan_sn_celeba_64	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
.t_wgan_sn_celeba_64	call	add_loss
Conv2D	has_arg0	(5, 5)
Adam	followed_by	Subtract()
Model	followed_by	Input
Input	followed_by	Input
.t_wgan_sn_celeba_64	call	data_generator
range	has_arg0	1
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
LeakyReLU()	followed_by	GlobalAveragePooling2D()
Conv2DTranspose	has_arg0	3
.t_wgan_sn_celeba_64	call	shuffle
Conv2DTranspose	has_arg1	(5, 5)
.t_wgan_sn_celeba_64	call	Reshape((4, 4, img_dim * 8))
Activation('relu')	call	Activation
Reshape((4, 4, img_dim * 8))	followed_by	range
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
Activation('tanh')	followed_by	Model
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
range	has_arg0	3
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
add_loss	followed_by	Adam
range	has_arg0	2
Conv2DTranspose	has_arg0	(5, 5)
range	followed_by	sample
range	followed_by	range
data_generator	followed_by	range
.t_wgan_sn_celeba_64	call	Dense(4 * 4 * img_dim * 8)
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Input	has_shape	(z_dim,)
Adam	has_arg0	0.0002
zeros	followed_by	range
.t_wgan_sn_celeba_64	call	range
sample	call	range
Activation	has_arg0	relu
Input	has_shape	(K.int_shape(x)[-1],)
.t_wgan_sn_celeba_64	call	Adam
.t_wgan_sn_celeba_64	call	Activation('relu')
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Dense	has_arg0	1
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_wgan_sn_celeba_64	call	sample
.t_wgan_sn_celeba_64	call	Input
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
.t_wgan_sn_celeba_64	call	Model
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
.t_wgan_sn_celeba_64	call	mean
LeakyReLU()	call	LeakyReLU
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
Input	followed_by	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_64	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
.t_wgan_sn_celeba_64	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_64	call	Dense(512, kernel_constraint=spectral_normalization)
Reshape((4, 4, img_dim * 8))	call	reshape
.t_wgan_sn_celeba_64	call	Subtract()
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	followed_by	LeakyReLU()
Dense	has_arg0	512
.t_wgan_sn_celeba_64	call	GlobalAveragePooling2D()
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	call	Conv2D
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
reshape	has_arg0	(4, 4, img_dim * 8)
BatchNormalization()	followed_by	Activation('relu')
BatchNormalization()	call	BatchNormalization
Dense	has_activation	sigmoid
Subtract()	call	Subtract
Adam	has_arg1	0.5
.t_wgan_sn_celeba_64	call	LeakyReLU()
.t_wgan_sn_celeba_64	call	BatchNormalization()
Model	followed_by	mean
mean	followed_by	add_loss
Dense(4 * 4 * img_dim * 8)	call	Dense
.t_wgan_sn_celeba_64	call	BatchNormalization(gamma_constraint=spectral_normalization)
Activation	has_arg0	tanh
Subtract()	followed_by	Subtract()
Input	followed_by	Subtract()
Activation('tanh')	call	Activation
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Adam	followed_by	data_generator
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
.t_wgan_sn_celeba_64	call	Activation('tanh')
.t_wgan_sn_celeba_64	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
range	followed_by	l2_normalize
ones	has_arg0	(1, in_dim)
spectral_norm	call	ones
spectral_norm	call	transpose
l2_normalize	followed_by	l2_normalize
t_sagan_u_celeba.SpectralNormalization.__call__	call	spectral_normalization
spectral_norm	call	l2_normalize
spectral_normalization	followed_by	spectral_normalization
reshape	has_arg0	(in_dim, out_dim)
reshape	followed_by	ones
ones	followed_by	range
l2_normalize	call	transpose
spectral_norm	call	range
l2_normalize	followed_by	transpose
spectral_normalization	call	spectral_norm
spectral_norm	call	reshape
Reshape((4, 4, img_dim * 8))	call	reshape
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_wgan_sn_celeba_128	call	Activation('relu')
Adam	has_arg0	0.0002
range	followed_by	range
.t_wgan_sn_celeba_128	call	data_generator
sample	call	zeros
Activation('relu')	call	Activation
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Adam	followed_by	Subtract()
.t_wgan_sn_celeba_128	call	Dense(512, kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_128	call	GlobalAveragePooling2D()
mean	followed_by	add_loss
.t_wgan_sn_celeba_128	call	Reshape((4, 4, img_dim * 8))
.t_wgan_sn_celeba_128	call	Adam
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
LeakyReLU()	followed_by	range
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	call	Conv2D
reshape	has_arg0	(4, 4, img_dim * 8)
Activation('tanh')	call	Activation
Activation('tanh')	followed_by	Model
.t_wgan_sn_celeba_128	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Input	has_shape	(z_dim,)
Subtract()	followed_by	Subtract()
Conv2DTranspose	has_arg1	(5, 5)
range	has_arg0	2
Dense	has_arg0	512
Conv2DTranspose	has_arg0	(5, 5)
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
.t_wgan_sn_celeba_128	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Dense	has_activation	sigmoid
.t_wgan_sn_celeba_128	call	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_128	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
data_generator	followed_by	range
.t_wgan_sn_celeba_128	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
range	has_arg0	3
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Subtract()	followed_by	Model
Conv2DTranspose	has_arg0	3
Adam	has_arg1	0.5
Dense(4 * 4 * img_dim * 8)	call	Dense
add_loss	followed_by	Adam
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
shuffle	followed_by	Input
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
Subtract()	call	Subtract
.t_wgan_sn_celeba_128	call	add_loss
.t_wgan_sn_celeba_128	call	LeakyReLU()
GlobalAveragePooling2D()	followed_by	Model
Conv2D	has_arg0	(5, 5)
Model	followed_by	mean
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	followed_by	LeakyReLU()
zeros	followed_by	range
Input	followed_by	Input
.t_wgan_sn_celeba_128	call	shuffle
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
.t_wgan_sn_celeba_128	call	BatchNormalization(gamma_constraint=spectral_normalization)
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_wgan_sn_celeba_128	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Activation	has_arg0	tanh
.t_wgan_sn_celeba_128	call	mean
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_wgan_sn_celeba_128	call	Input
BatchNormalization()	followed_by	Activation('relu')
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
LeakyReLU()	followed_by	GlobalAveragePooling2D()
sample	call	range
Reshape((4, 4, img_dim * 8))	followed_by	range
.t_wgan_sn_celeba_128	call	Model
range	has_arg0	1
Conv2DTranspose	has_padding	same
LeakyReLU()	call	LeakyReLU
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Input	followed_by	Subtract()
Activation	has_arg0	relu
BatchNormalization()	call	BatchNormalization
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Input	has_shape	(img_dim, img_dim, 3)
range	followed_by	sample
Input	has_shape	(K.int_shape(x)[-1],)
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
Model	followed_by	Input
.t_wgan_sn_celeba_128	call	BatchNormalization()
.t_wgan_sn_celeba_128	call	sample
Adam	followed_by	data_generator
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
.t_wgan_sn_celeba_128	call	Activation('tanh')
Dense	has_arg0	1
.t_wgan_sn_celeba_128	call	Subtract()
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_wgan_sn_celeba_128	call	range
range	has_arg0	4
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Adam	followed_by	data_generator
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Conv2D	has_arg0	(5, 5)
Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))	call	Dense
Activation	has_arg0	tanh
Conv2DTranspose	has_arg0	(5, 5)
LeakyReLU	has_arg0	0.2
.sgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Conv2DTranspose	has_padding	same
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	followed_by	BatchNormalization()
Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))	followed_by	Model
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
mean	call	log_sigmoid
.sgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
Conv2D	has_padding	same
sample	call	zeros
BatchNormalization()	followed_by	LeakyReLU(0.2)
.sgan_deconv_no_sn_loss_bias	call	Adam
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Input	followed_by	Model
Dense	call	log
Activation('relu')	call	Activation
.sgan_deconv_no_sn_loss_bias	call	Activation('relu')
.sgan_deconv_no_sn_loss_bias	call	Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))
range	followed_by	range
Model	followed_by	Input
log	has_arg0	2.0
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.sgan_deconv_no_sn_loss_bias	call	data_generator
Activation('tanh')	call	Activation
LeakyReLU(0.2)	call	LeakyReLU
Reshape((f_size, f_size, max_num_channels))	followed_by	range
add_loss	followed_by	Adam
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	call	Conv2D
data_generator	followed_by	range
.sgan_deconv_no_sn_loss_bias	call	mean
.sgan_deconv_no_sn_loss_bias	call	Input
sample	call	range
log	followed_by	softplus
Model	followed_by	mean
Dense(f_size ** 2 * max_num_channels)	call	Dense
range	followed_by	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
range	followed_by	sample
Dense	call	softplus
Input	has_shape	(z_dim,)
mean	followed_by	add_loss
.sgan_deconv_no_sn_loss_bias	call	LeakyReLU(0.2)
.sgan_deconv_no_sn_loss_bias	call	range
Reshape((f_size, f_size, max_num_channels))	call	reshape
Activation('tanh')	followed_by	Model
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
Conv2DTranspose	has_arg1	(5, 5)
.sgan_deconv_no_sn_loss_bias	call	Model
Input	has_shape	(img_dim, img_dim, 3)
.sgan_deconv_no_sn_loss_bias	call	Dense(f_size ** 2 * max_num_channels)
reshape	has_arg0	(f_size, f_size, max_num_channels)
.sgan_deconv_no_sn_loss_bias	call	Reshape((f_size, f_size, max_num_channels))
Conv2DTranspose	has_arg0	3
Activation	has_arg0	relu
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
log_sigmoid	followed_by	log_sigmoid
.sgan_deconv_no_sn_loss_bias	call	GlobalAveragePooling2D()
Dense	has_arg0	1
.sgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
.sgan_deconv_no_sn_loss_bias	call	sample
.sgan_deconv_no_sn_loss_bias	call	BatchNormalization()
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
.sgan_deconv_no_sn_loss_bias	call	Activation('tanh')
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.sgan_deconv_no_sn_loss_bias	call	shuffle
GlobalAveragePooling2D()	followed_by	Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))
BatchNormalization()	followed_by	Activation('relu')
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
range	followed_by	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
.sgan_deconv_no_sn_loss_bias	call	add_loss
range	has_arg0	2
Input	followed_by	range
shuffle	followed_by	Input
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
Input	followed_by	Input
Adam	followed_by	Model
Adam	has_arg1	0.5
Adam	has_arg0	0.0002
zeros	followed_by	range
BatchNormalization()	call	BatchNormalization
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
LeakyReLU()	call	LeakyReLU
Activation('tanh')	call	Activation
Conv2DTranspose	has_arg0	3
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
Dense(4 * 4 * img_dim * 8)	call	Dense
zeros	followed_by	range
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Activation	has_arg0	relu
Input	followed_by	Subtract()
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
data_generator	followed_by	range
Conv2DTranspose	has_arg1	(5, 5)
range	followed_by	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
add_loss	followed_by	Adam
.t_wgan_sn_celeba_256	call	mean
.t_wgan_sn_celeba_256	call	Dense(512, kernel_constraint=spectral_normalization)
Input	followed_by	Input
.t_wgan_sn_celeba_256	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
LeakyReLU()	followed_by	range
.t_wgan_sn_celeba_256	call	Input
.t_wgan_sn_celeba_256	call	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_256	call	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_256	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
range	has_arg0	5
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
range	has_arg0	2
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Adam	has_arg0	0.0002
Subtract()	call	Subtract
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Subtract()	followed_by	Model
GlobalAveragePooling2D()	followed_by	Model
.t_wgan_sn_celeba_256	call	shuffle
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
Reshape((4, 4, img_dim * 8))	call	reshape
Reshape((4, 4, img_dim * 8))	followed_by	range
sample	call	zeros
range	has_arg0	4
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
.t_wgan_sn_celeba_256	call	BatchNormalization(gamma_constraint=spectral_normalization)
.t_wgan_sn_celeba_256	call	sample
LeakyReLU()	followed_by	GlobalAveragePooling2D()
Activation	has_arg0	tanh
BatchNormalization()	followed_by	Activation('relu')
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_wgan_sn_celeba_256	call	Adam
Adam	followed_by	data_generator
reshape	has_arg0	(4, 4, img_dim * 8)
.t_wgan_sn_celeba_256	call	Subtract()
Model	followed_by	Input
mean	followed_by	add_loss
.t_wgan_sn_celeba_256	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Activation('relu')	call	Activation
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Activation('tanh')	followed_by	Model
Dense	has_arg0	512
range	has_arg0	1
shuffle	followed_by	Input
Conv2DTranspose	has_padding	same
Adam	has_arg1	0.5
.t_wgan_sn_celeba_256	call	Activation('tanh')
.t_wgan_sn_celeba_256	call	range
.t_wgan_sn_celeba_256	call	Model
BatchNormalization()	call	BatchNormalization
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Input	has_shape	(K.int_shape(x)[-1],)
Input	has_shape	(z_dim,)
range	followed_by	range
Conv2D	has_arg0	(5, 5)
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Dense	has_arg0	1
.t_wgan_sn_celeba_256	call	BatchNormalization()
Adam	followed_by	Subtract()
.t_wgan_sn_celeba_256	call	add_loss
Dense	has_activation	sigmoid
.t_wgan_sn_celeba_256	call	data_generator
Input	has_shape	(img_dim, img_dim, 3)
.t_wgan_sn_celeba_256	call	Activation('relu')
.t_wgan_sn_celeba_256	call	GlobalAveragePooling2D()
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.t_wgan_sn_celeba_256	call	LeakyReLU()
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
.t_wgan_sn_celeba_256	call	Reshape((4, 4, img_dim * 8))
Conv2DTranspose	has_arg0	(5, 5)
.t_wgan_sn_celeba_256	call	Dense(4 * 4 * img_dim * 8)
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Input	followed_by	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Model	followed_by	mean
range	followed_by	sample
sample	call	range
Subtract()	followed_by	Subtract()
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	GlobalAveragePooling2D()
Conv2DTranspose(256, (4, 4), strides=(1, 1))	call	Conv2DTranspose
.t_sgan_sn_cifar10	call	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	256
Input	followed_by	Dense(256, kernel_constraint=spectral_normalization)
Conv2D	has_arg0	32
.t_sgan_sn_cifar10	call	Conv2DTranspose(128, (4, 4), strides=(2, 2))
.t_sgan_sn_cifar10	call	Conv2D(32, (1, 1), strides=(1, 1))
add_loss	followed_by	Adam
.t_sgan_sn_cifar10	call	Conv2DTranspose(32, (4, 4), strides=(2, 2))
LeakyReLU()	followed_by	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
range	followed_by	range
Conv2DTranspose(32, (5, 5), strides=(1, 1))	call	Conv2DTranspose
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
Adam	followed_by	Subtract()
Conv2D	has_arg0	128
LeakyReLU(0.1)	followed_by	Conv2D(32, (1, 1), strides=(1, 1))
sample	call	zeros
LeakyReLU(0.1)	followed_by	Conv2DTranspose(128, (4, 4), strides=(2, 2))
Conv2D	has_arg0	64
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (5, 5), strides=(1, 1))
Subtract()	followed_by	Subtract()
range	followed_by	sample
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Reshape((1, 1, z_dim))	followed_by	Conv2DTranspose(256, (4, 4), strides=(1, 1))
.t_sgan_sn_cifar10	call	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Input
Dense	has_arg0	256
Adam	has_arg1	0.5
sample	call	range
Dense	has_arg0	1
Adam	followed_by	range
Input	followed_by	Reshape((1, 1, z_dim))
Input	has_shape	(img_dim, img_dim, 3)
Input	followed_by	Input
.t_sgan_sn_cifar10	call	Conv2DTranspose(256, (4, 4), strides=(1, 1))
mean	followed_by	add_loss
Conv2DTranspose	has_arg0	128
range	has_arg0	1
LeakyReLU(0.1)	followed_by	Conv2DTranspose(64, (4, 4), strides=(1, 1))
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	followed_by	Model
Subtract()	call	Subtract
.t_sgan_sn_cifar10	call	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2D	has_arg1	(1, 1)
Conv2D	has_arg0	256
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_cifar10	call	Reshape((1, 1, z_dim))
Conv2D(32, (1, 1), strides=(1, 1))	call	Conv2D
LeakyReLU(0.1)	call	LeakyReLU
LeakyReLU()	followed_by	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Conv2DTranspose(64, (4, 4), strides=(1, 1))
.t_sgan_sn_cifar10	call	range
.t_sgan_sn_cifar10	call	BatchNormalization()
Conv2D	has_arg1	(4, 4)
.t_sgan_sn_cifar10	call	sample
Subtract()	followed_by	Model
Input	followed_by	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	mean
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
reshape	has_arg0	(1, 1, z_dim)
range	has_arg0	2
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Dense(256, kernel_constraint=spectral_normalization)	call	Dense
Input	has_shape	(z_dim,)
Conv2DTranspose	has_arg1	(5, 5)
Model	followed_by	Input
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2DTranspose(32, (5, 5), strides=(1, 1))	followed_by	BatchNormalization()
LeakyReLU()	followed_by	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2DTranspose(64, (4, 4), strides=(1, 1))	call	Conv2DTranspose
.t_sgan_sn_cifar10	call	BatchNormalization(gamma_constraint=spectral_normalization)
Reshape((1, 1, z_dim))	call	reshape
Conv2DTranspose	has_arg0	64
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	call	Conv2D
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Conv2DTranspose(32, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
Conv2DTranspose	has_strides	(2, 2)
.t_sgan_sn_cifar10	call	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
log	followed_by	log
Adam	has_arg0	0.0002
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2D	has_arg0	(1, 1)
Conv2DTranspose(64, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
Conv2D	has_arg1	(5, 5)
LeakyReLU(0.1)	followed_by	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
GlobalAveragePooling2D()	followed_by	Model
.t_sgan_sn_cifar10	call	Dense(256, kernel_constraint=spectral_normalization)
Model	followed_by	mean
Dense	has_activation	sigmoid
.t_sgan_sn_cifar10	call	LeakyReLU(0.1)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (4, 4), strides=(2, 2))
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Dense(256, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU(0.1)
LeakyReLU	has_arg0	0.1
Conv2DTranspose	has_arg1	(4, 4)
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Adam
Conv2DTranspose(32, (4, 4), strides=(2, 2))	call	Conv2DTranspose
mean	call	log
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_cifar10	call	Subtract()
Conv2DTranspose	has_strides	(1, 1)
Conv2DTranspose(256, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
BatchNormalization()	followed_by	LeakyReLU(0.1)
load_data	followed_by	Input
.t_sgan_sn_cifar10	call	Conv2DTranspose(32, (5, 5), strides=(1, 1))
.t_sgan_sn_cifar10	call	Model
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
Conv2DTranspose(128, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
Conv2D(32, (1, 1), strides=(1, 1))	followed_by	BatchNormalization()
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Conv2DTranspose	has_arg0	32
Conv2D	has_strides	(1, 1)
BatchNormalization()	call	BatchNormalization
.t_sgan_sn_cifar10	call	load_data
Input	has_shape	(K.int_shape(x)[-1],)
LeakyReLU()	followed_by	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
LeakyReLU()	call	LeakyReLU
Input	followed_by	Subtract()
.t_sgan_sn_cifar10	call	LeakyReLU()
LeakyReLU(0.1)	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Conv2D	has_arg0	3
Conv2DTranspose(128, (4, 4), strides=(2, 2))	call	Conv2DTranspose
.t_sgan_sn_cifar10	call	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
zeros	followed_by	range
.t_sgan_sn_cifar10	call	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	add_loss
.t_sgan_sn_cifar10	call	GlobalAveragePooling2D()
Conv2D	has_activation	tanh
spectral_norm	call	reshape
spectral_norm	call	l2_normalize
spectral_norm	call	ones
spectral_norm	call	range
range	followed_by	l2_normalize
l2_normalize	followed_by	transpose
ones	has_arg0	(1, in_dim)
ones	followed_by	range
reshape	followed_by	ones
spectral_normalization	call	spectral_norm
reshape	has_arg0	(in_dim, out_dim)
spectral_normalization	followed_by	spectral_normalization
t_sagan_celeba.SpectralNormalization.__call__	call	spectral_normalization
l2_normalize	call	transpose
l2_normalize	followed_by	l2_normalize
spectral_norm	call	transpose
reshape	has_arg0	(in_dim, out_dim)
spectral_norm	call	transpose
spectral_normalization	call	spectral_norm
reshape	followed_by	ones
l2_normalize	followed_by	transpose
spectral_norm	call	reshape
spectral_norm	call	l2_normalize
spectral_norm	call	ones
range	followed_by	l2_normalize
l2_normalize	followed_by	l2_normalize
ones	followed_by	range
spectral_normalization	followed_by	spectral_normalization
l2_normalize	call	transpose
ones	has_arg0	(1, in_dim)
t_sgan_sn_deconv.SpectralNormalization.__call__	call	spectral_normalization
spectral_norm	call	range
Reshape((4, 4, img_dim * 8))	followed_by	range
Subtract()	call	Subtract
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Adam	followed_by	data_generator
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
.t_sgan_sn_celeba_128	call	Dense(4 * 4 * img_dim * 8)
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
Model	followed_by	mean
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	call	Dense
mean	followed_by	add_loss
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
LeakyReLU()	followed_by	range
.t_sgan_sn_celeba_128	call	add_loss
.t_sgan_sn_celeba_128	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
data_generator	followed_by	range
Adam	has_arg1	0.5
.t_sgan_sn_celeba_128	call	BatchNormalization(gamma_constraint=spectral_normalization)
range	has_arg0	3
.t_sgan_sn_celeba_128	call	GlobalAveragePooling2D()
.t_sgan_sn_celeba_128	call	data_generator
.t_sgan_sn_celeba_128	call	sample
.t_sgan_sn_celeba_128	call	Activation('tanh')
Dense(4 * 4 * img_dim * 8)	call	Dense
.t_sgan_sn_celeba_128	call	Input
.t_sgan_sn_celeba_128	call	Model
BatchNormalization()	call	BatchNormalization
Dense	has_activation	sigmoid
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
.t_sgan_sn_celeba_128	call	Reshape((4, 4, img_dim * 8))
Input	has_shape	(z_dim,)
Input	has_shape	(img_dim, img_dim, 3)
.t_sgan_sn_celeba_128	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Subtract()	followed_by	Subtract()
Conv2DTranspose	has_padding	same
range	followed_by	sample
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Dense	has_arg0	512
Input	followed_by	Subtract()
Activation	has_arg0	relu
Model	followed_by	Input
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
log	followed_by	log
.t_sgan_sn_celeba_128	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Input	has_shape	(K.int_shape(x)[-1],)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_sgan_sn_celeba_128	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
range	followed_by	range
.t_sgan_sn_celeba_128	call	Adam
.t_sgan_sn_celeba_128	call	Activation('relu')
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	call	Conv2D
mean	call	log
range	has_arg0	1
.t_sgan_sn_celeba_128	call	Subtract()
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
shuffle	followed_by	Input
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
.t_sgan_sn_celeba_128	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_128	call	LeakyReLU()
BatchNormalization()	followed_by	Activation('relu')
Conv2DTranspose	has_arg0	3
.t_sgan_sn_celeba_128	call	BatchNormalization()
GlobalAveragePooling2D()	followed_by	Model
sample	call	zeros
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
.t_sgan_sn_celeba_128	call	Dense(512, kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg1	(5, 5)
.t_sgan_sn_celeba_128	call	shuffle
LeakyReLU()	followed_by	GlobalAveragePooling2D()
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
sample	call	range
Activation('relu')	call	Activation
Input	followed_by	Input
Conv2D	has_arg0	(5, 5)
LeakyReLU()	call	LeakyReLU
Adam	followed_by	Subtract()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose	has_arg0	(5, 5)
Subtract()	followed_by	Model
Reshape((4, 4, img_dim * 8))	call	reshape
reshape	has_arg0	(4, 4, img_dim * 8)
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',
    kernel_constraint=spectral_normalization)
Adam	has_arg0	0.0002
add_loss	followed_by	Adam
range	has_arg0	4
.t_sgan_sn_celeba_128	call	range
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	followed_by	LeakyReLU()
Dense	has_arg0	1
.t_sgan_sn_celeba_128	call	mean
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,
    activation='sigmoid')	followed_by	Model
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=
    spectral_normalization)	call	Conv2D
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Activation('tanh')	call	Activation
Activation	has_arg0	tanh
zeros	followed_by	range
Activation('tanh')	followed_by	Model
range	has_arg0	2
Dense	has_arg0	256
.sgan_sn_cifar10	call	Model
Conv2D	has_strides	(1, 1)
Conv2D	has_arg1	(4, 4)
Conv2D(32, (1, 1), strides=(1, 1))	call	Conv2D
zeros	followed_by	range
.sgan_sn_cifar10	call	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
.sgan_sn_cifar10	call	Input
BatchNormalization()	followed_by	LeakyReLU(0.1)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (4, 4), strides=(2, 2))
Conv2D	has_arg1	(1, 1)
.sgan_sn_cifar10	call	Conv2DTranspose(32, (4, 4), strides=(2, 2))
.sgan_sn_cifar10	call	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	64
Input	followed_by	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	Conv2DTranspose(64, (4, 4), strides=(1, 1))
.sgan_sn_cifar10	call	Conv2DTranspose(128, (4, 4), strides=(2, 2))
Input	has_shape	(z_dim,)
Conv2D	has_arg0	3
.sgan_sn_cifar10	call	GlobalAveragePooling2D()
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2DTranspose	has_arg0	256
Model	followed_by	Input
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (5, 5), strides=(1, 1))
Conv2DTranspose	has_arg0	32
.sgan_sn_cifar10	call	Conv2D(32, (1, 1), strides=(1, 1))
Conv2D	has_arg0	256
Adam	followed_by	Model
Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=
    spectral_normalization)	call	Dense
.sgan_sn_cifar10	call	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2DTranspose	has_strides	(1, 1)
Input	has_shape	(img_dim, img_dim, 3)
Model	followed_by	mean
Conv2DTranspose	has_arg1	(5, 5)
.sgan_sn_cifar10	call	Conv2DTranspose(256, (4, 4), strides=(1, 1))
LeakyReLU(0.1)	followed_by	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
log	followed_by	log
Input	followed_by	Input
Reshape((1, 1, z_dim))	call	reshape
LeakyReLU(0.1)	followed_by	Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=
    spectral_normalization)
Conv2DTranspose(32, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
Conv2D(32, (1, 1), strides=(1, 1))	followed_by	BatchNormalization()
.sgan_sn_cifar10	call	LeakyReLU(0.1)
.sgan_sn_cifar10	call	add_loss
.sgan_sn_cifar10	call	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
add_loss	call	mean
reshape	has_arg0	(1, 1, z_dim)
Conv2DTranspose	has_arg1	(4, 4)
.sgan_sn_cifar10	call	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2D	has_arg0	64
sample	call	zeros
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	call	Conv2D
Dense	has_arg0	1
.sgan_sn_cifar10	call	Conv2DTranspose(32, (5, 5), strides=(1, 1))
LeakyReLU(0.1)	followed_by	Conv2D(32, (1, 1), strides=(1, 1))
Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=
    spectral_normalization)	followed_by	Model
Conv2DTranspose(64, (4, 4), strides=(1, 1))	call	Conv2DTranspose
.sgan_sn_cifar10	call	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
.sgan_sn_cifar10	call	Reshape((1, 1, z_dim))
Conv2D	has_arg0	128
Conv2DTranspose(128, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
LeakyReLU(0.1)	followed_by	Conv2DTranspose(128, (4, 4), strides=(2, 2))
Conv2D	has_activation	tanh
.sgan_sn_cifar10	call	Dense(256, kernel_constraint=spectral_normalization)
Conv2DTranspose(64, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
add_loss	followed_by	Adam
Input	followed_by	Reshape((1, 1, z_dim))
Conv2DTranspose	has_arg0	128
.sgan_sn_cifar10	call	sample
.sgan_sn_cifar10	call	LeakyReLU()
LeakyReLU()	followed_by	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2D	has_arg0	(1, 1)
.sgan_sn_cifar10	call	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(64, (4, 4), strides=(1, 1))
Dense(256, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU(0.1)
mean	followed_by	add_loss
range	has_arg0	1
Adam	has_arg0	0.0002
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	followed_by	Model
sample	call	range
Conv2DTranspose(128, (4, 4), strides=(2, 2))	call	Conv2DTranspose
.sgan_sn_cifar10	call	mean
LeakyReLU()	followed_by	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	range
LeakyReLU	has_arg0	0.1
Adam	followed_by	range
Conv2DTranspose(32, (5, 5), strides=(1, 1))	followed_by	BatchNormalization()
mean	call	log
load_data	followed_by	Input
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
range	has_arg0	2
Conv2DTranspose(32, (5, 5), strides=(1, 1))	call	Conv2DTranspose
GlobalAveragePooling2D()	followed_by	Dense(256, kernel_constraint=spectral_normalization)
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Adam	has_arg1	0.5
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Dense(256, kernel_constraint=spectral_normalization)	call	Dense
Conv2DTranspose	has_strides	(2, 2)
.sgan_sn_cifar10	call	BatchNormalization()
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Input	followed_by	Model
BatchNormalization()	call	BatchNormalization
Conv2DTranspose(32, (4, 4), strides=(2, 2))	call	Conv2DTranspose
Conv2DTranspose(256, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
LeakyReLU()	followed_by	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
.sgan_sn_cifar10	call	Adam
Conv2D	has_arg1	(5, 5)
range	followed_by	sample
.sgan_sn_cifar10	call	Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=
    spectral_normalization)
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	GlobalAveragePooling2D()
LeakyReLU(0.1)	call	LeakyReLU
range	followed_by	range
LeakyReLU()	followed_by	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.sgan_sn_cifar10	call	load_data
Reshape((1, 1, z_dim))	followed_by	Conv2DTranspose(256, (4, 4), strides=(1, 1))
Conv2DTranspose(256, (4, 4), strides=(1, 1))	call	Conv2DTranspose
Conv2D	has_arg0	32
LeakyReLU()	call	LeakyReLU
Model	followed_by	add_loss
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
spectral_norm	call	transpose
spectral_normalization	call	spectral_norm
reshape	followed_by	ones
range	followed_by	l2_normalize
l2_normalize	followed_by	l2_normalize
spectral_norm	call	ones
ones	has_arg0	(1, in_dim)
l2_normalize	call	transpose
spectral_normalization	followed_by	spectral_normalization
spectral_norm	call	l2_normalize
reshape	has_arg0	(in_dim, out_dim)
t_sgan_sn_upsample.SpectralNormalization.__call__	call	spectral_normalization
ones	followed_by	range
spectral_norm	call	range
spectral_norm	call	reshape
l2_normalize	followed_by	transpose
