.t_wgan_sn_celeba_256	call	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_256	call	mean
Input	has_shape	(z_dim,)
sample	call	range
BatchNormalization()	call	BatchNormalization
Adam	followed_by	Subtract()
Activation('tanh')	followed_by	Model
LeakyReLU()	followed_by	range
Input	followed_by	Input
GlobalAveragePooling2D()	followed_by	Model
.t_wgan_sn_celeba_256	call	LeakyReLU()
range	has_arg0	2
.t_wgan_sn_celeba_256	call	BatchNormalization()
Dense	has_activation	sigmoid
.t_wgan_sn_celeba_256	call	Activation('tanh')
Dense	has_arg0	1
Model	followed_by	mean
range	has_arg0	4
Input	has_shape	(K.int_shape(x)[-1],)
Conv2DTranspose	has_padding	same
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.t_wgan_sn_celeba_256	call	Activation('relu')
Activation('tanh')	call	Activation
.t_wgan_sn_celeba_256	call	shuffle
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
zeros	followed_by	range
Conv2D	has_arg0	(5, 5)
Reshape((4, 4, img_dim * 8))	call	reshape
.t_wgan_sn_celeba_256	call	Model
.t_wgan_sn_celeba_256	call	range
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
data_generator	followed_by	range
Conv2DTranspose	has_arg0	(5, 5)
.t_wgan_sn_celeba_256	call	Reshape((4, 4, img_dim * 8))
.t_wgan_sn_celeba_256	call	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_256	call	add_loss
range	followed_by	range
range	followed_by	sample
Activation	has_arg0	relu
LeakyReLU()	followed_by	GlobalAveragePooling2D()
.t_wgan_sn_celeba_256	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Reshape((4, 4, img_dim * 8))	followed_by	range
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Adam	has_arg1	0.5
Model	followed_by	Input
range	has_arg0	1
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_wgan_sn_celeba_256	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
.t_wgan_sn_celeba_256	call	Subtract()
Dense	has_arg0	512
.t_wgan_sn_celeba_256	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
Activation('relu')	call	Activation
Subtract()	followed_by	Subtract()
Conv2DTranspose	has_arg0	3
reshape	has_arg0	(4, 4, img_dim * 8)
range	has_arg0	5
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_wgan_sn_celeba_256	call	GlobalAveragePooling2D()
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Input	followed_by	Subtract()
.t_wgan_sn_celeba_256	call	Input
Adam	has_arg0	0.0002
mean	followed_by	add_loss
Adam	followed_by	data_generator
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
.t_wgan_sn_celeba_256	call	data_generator
sample	call	zeros
Input	followed_by	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
shuffle	followed_by	Input
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
.t_wgan_sn_celeba_256	call	BatchNormalization(gamma_constraint=spectral_normalization)
Input	has_shape	(img_dim, img_dim, 3)
.t_wgan_sn_celeba_256	call	Dense(512, kernel_constraint=spectral_normalization)
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
add_loss	followed_by	Adam
.t_wgan_sn_celeba_256	call	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Subtract()	followed_by	Model
Activation	has_arg0	tanh
Input	followed_by	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_256	call	Adam
.t_wgan_sn_celeba_256	call	sample
LeakyReLU()	call	LeakyReLU
range	followed_by	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg1	(5, 5)
Dense(4 * 4 * img_dim * 8)	call	Dense
BatchNormalization()	followed_by	Activation('relu')
Subtract()	call	Subtract
Conv2D	has_arg1	(4, 4)
range	followed_by	sample
.t_sagan_u_celeba	call	data_generator
Adam	has_arg1	0.5
Input	has_shape	(K.int_shape(x)[-1],)
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Adam	followed_by	Subtract()
add_loss	followed_by	Adam
range	followed_by	UpSampling2D()
sample	call	zeros
Activation('tanh')	call	Activation
Activation	has_arg0	tanh
reshape	has_arg0	(f_size, f_size, max_num_channels)
zeros	followed_by	range
Conv2D	has_arg0	3
range	followed_by	LeakyReLU(0.2)
range	followed_by	range
Activation('relu')	call	Activation
.t_sagan_u_celeba	call	Dense(f_size ** 2 * max_num_channels)
UpSampling2D()	followed_by	Conv2D(3, (4, 4), padding='same')
.t_sagan_u_celeba	call	Conv2D(num_channels // 8, (1, 1))
Conv2D(3, (4, 4), padding='same')	followed_by	Activation('tanh')
.t_sagan_u_celeba	call	Input
Add()	call	Add
mean	call	log_sigmoid
mean	followed_by	add_loss
Activation('relu')	followed_by	Conv2D(num_channels // 8, (1, 1))
.t_sagan_u_celeba	call	Conv2D(3, (4, 4), padding='same')
shuffle	followed_by	Input
Conv2D(num_channels, (4, 4), padding='same')	call	Conv2D
.t_sagan_u_celeba	call	BatchNormalization()
.t_sagan_u_celeba	call	Activation('tanh')
Input	followed_by	Subtract()
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
.t_sagan_u_celeba	call	Adam
Conv2D(num_channels, (1, 1))	followed_by	Add()
Activation	has_arg0	relu
Activation('tanh')	followed_by	Model
.t_sagan_u_celeba	call	Conv2D(num_channels, (1, 1))
Reshape((f_size, f_size, max_num_channels))	call	reshape
log_sigmoid	followed_by	log_sigmoid
LeakyReLU	has_arg0	0.2
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels, (1, 1))
LeakyReLU(0.2)	call	LeakyReLU
UpSampling2D()	call	UpSampling2D
.t_sagan_u_celeba	call	sample
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
.t_sagan_u_celeba	call	add_loss
LeakyReLU(0.2)	followed_by	Add()
Conv2D	has_padding	same
.t_sagan_u_celeba	call	mean
.t_sagan_u_celeba	call	Add()
Adam	followed_by	data_generator
.t_sagan_u_celeba	call	Subtract()
Add()	followed_by	GlobalAveragePooling2D()
.t_sagan_u_celeba	call	GlobalAveragePooling2D()
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sagan_u_celeba	call	Model
.t_sagan_u_celeba	call	Activation('relu')
Conv2D	has_arg0	(4, 4)
.t_sagan_u_celeba	call	shuffle
.t_sagan_u_celeba	call	Reshape((f_size, f_size, max_num_channels))
Conv2D(num_channels, (4, 4), padding='same')	followed_by	BatchNormalization()
Input	has_shape	(z_dim,)
Input	followed_by	Input
Model	followed_by	Input
Add()	followed_by	UpSampling2D()
.t_sagan_u_celeba	call	UpSampling2D()
sample	call	range
Subtract()	call	Subtract
Conv2D	has_arg0	(1, 1)
BatchNormalization()	followed_by	Activation('relu')
UpSampling2D()	followed_by	Conv2D(num_channels, (4, 4), padding='same')
Conv2D(3, (4, 4), padding='same')	call	Conv2D
Adam	has_arg0	0.0002
Input	has_shape	(img_dim, img_dim, 3)
GlobalAveragePooling2D()	followed_by	Model
Input	followed_by	Model
.t_sagan_u_celeba	call	Conv2D(num_channels, (4, 4), padding='same')
.t_sagan_u_celeba	call	range
.t_sagan_u_celeba	call	LeakyReLU(0.2)
Input	followed_by	range
Dense(f_size ** 2 * max_num_channels)	call	Dense
Conv2D(num_channels, (1, 1))	call	Conv2D
range	has_arg0	2
data_generator	followed_by	range
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels // 8, (1, 1))
Subtract()	followed_by	Subtract()
Subtract()	followed_by	Model
BatchNormalization()	call	BatchNormalization
Conv2D(num_channels // 8, (1, 1))	call	Conv2D
range	has_arg0	1
Model	followed_by	mean
Activation('relu')	followed_by	Conv2D(num_channels // 8, (1, 1))
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Add()	call	Add
.tsgan_deconv_no_sn_loss_bias	call	data_generator
Activation	has_arg0	tanh
range	has_arg0	1
LeakyReLU(0.2)	followed_by	Dense(1, use_bias=False)
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels, (1, 1))
Conv2DTranspose	has_arg1	(5, 5)
.tsgan_deconv_no_sn_loss_bias	call	GlobalAveragePooling2D()
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Adam	followed_by	data_generator
.tsgan_deconv_no_sn_loss_bias	call	range
.tsgan_deconv_no_sn_loss_bias	call	Dense(f_size ** 2 * max_num_channels)
Adam	has_arg1	0.5
Adam	followed_by	Concatenate()
BatchNormalization()	followed_by	LeakyReLU(0.2)
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (1, 1))
LeakyReLU	has_arg0	0.2
.tsgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Dense(512, use_bias=False)	followed_by	LeakyReLU(0.2)
Input	has_shape	(img_dim, img_dim, 3)
.tsgan_deconv_no_sn_loss_bias	call	sample
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
.tsgan_deconv_no_sn_loss_bias	call	BatchNormalization()
data_generator	followed_by	range
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
sample	call	range
.tsgan_deconv_no_sn_loss_bias	call	Concatenate()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2D(num_channels, (1, 1))	followed_by	Add()
Input	has_shape	(K.int_shape(x)[-1] * 2,)
Dense	has_arg0	1
range	followed_by	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
reshape	has_arg0	(f_size, f_size, max_num_channels)
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose	has_padding	same
Dense(1, use_bias=False)	followed_by	Model
.tsgan_deconv_no_sn_loss_bias	call	Dense(1, use_bias=False)
range	followed_by	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
.tsgan_deconv_no_sn_loss_bias	call	Input
Activation	has_arg0	relu
Concatenate()	followed_by	Concatenate()
.tsgan_deconv_no_sn_loss_bias	call	Reshape((f_size, f_size, max_num_channels))
Add()	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Concatenate()	followed_by	Model
Conv2DTranspose	has_arg0	3
Conv2D	has_padding	same
.tsgan_deconv_no_sn_loss_bias	call	Model
GlobalAveragePooling2D()	followed_by	Model
Dense(1, use_bias=False)	call	Dense
Dense(f_size ** 2 * max_num_channels)	call	Dense
Activation('tanh')	call	Activation
BatchNormalization()	followed_by	Activation('relu')
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels // 8, (1, 1))
shuffle	followed_by	Input
Input	has_shape	(z_dim,)
Model	followed_by	Input
Conv2D(num_channels // 8, (1, 1))	call	Conv2D
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
sample	call	zeros
Conv2D(num_channels // 8, (1, 1))	followed_by	Conv2D(num_channels // 8, (1, 1))
add_loss	followed_by	Adam
Adam	has_arg0	0.0002
Input	followed_by	Dense(512, use_bias=False)
range	followed_by	range
Input	followed_by	range
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	call	Conv2D
.tsgan_deconv_no_sn_loss_bias	call	Dense(512, use_bias=False)
Activation('relu')	call	Activation
.tsgan_deconv_no_sn_loss_bias	call	mean
Conv2D(num_channels, (1, 1))	call	Conv2D
Concatenate()	call	Concatenate
zeros	followed_by	range
Conv2DTranspose	has_arg0	(5, 5)
range	followed_by	sample
log_sigmoid	followed_by	log_sigmoid
Input	followed_by	Input
LeakyReLU(0.2)	call	LeakyReLU
Reshape((f_size, f_size, max_num_channels))	followed_by	range
.tsgan_deconv_no_sn_loss_bias	call	Add()
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	followed_by	BatchNormalization()
Model	followed_by	mean
.tsgan_deconv_no_sn_loss_bias	call	add_loss
Add()	followed_by	GlobalAveragePooling2D()
.tsgan_deconv_no_sn_loss_bias	call	Activation('relu')
Conv2D	has_arg0	(5, 5)
Dense	has_arg0	512
.tsgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
Conv2D	has_arg0	(1, 1)
mean	followed_by	add_loss
.tsgan_deconv_no_sn_loss_bias	call	shuffle
mean	call	log_sigmoid
LeakyReLU(0.2)	followed_by	Conv2D(num_channels // 8, (1, 1))
range	has_arg0	2
.tsgan_deconv_no_sn_loss_bias	call	Adam
Activation('tanh')	followed_by	Model
.tsgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
Reshape((f_size, f_size, max_num_channels))	call	reshape
Input	followed_by	Concatenate()
.tsgan_deconv_no_sn_loss_bias	call	LeakyReLU(0.2)
BatchNormalization()	call	BatchNormalization
.tsgan_deconv_no_sn_loss_bias	call	Activation('tanh')
Dense(512, use_bias=False)	call	Dense
Activation	has_arg0	tanh
Input	has_shape	(z_dim,)
Input	followed_by	Subtract()
range	followed_by	range
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
.t_sgan_sn_deconv	call	sample
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sgan_sn_deconv	call	add_loss
Adam	followed_by	Subtract()
Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
.t_sgan_sn_deconv	call	Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')
.t_sgan_sn_deconv	call	Reshape((f_size, f_size, max_num_channels))
range	followed_by	Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')
Adam	followed_by	data_generator
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
.t_sgan_sn_deconv	call	Adam
Input	followed_by	Input
.t_sgan_sn_deconv	call	LeakyReLU(0.2)
sample	call	zeros
data_generator	followed_by	range
range	followed_by	LeakyReLU(0.2)
.t_sgan_sn_deconv	call	Model
Activation('relu')	followed_by	Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')
.t_sgan_sn_deconv	call	Dense(f_size ** 2 * max_num_channels)
mean	call	log_sigmoid
range	followed_by	sample
range	has_arg0	2
Input	followed_by	range
.t_sgan_sn_deconv	call	Activation('relu')
Conv2DTranspose	has_arg0	(4, 4)
zeros	followed_by	range
Activation('tanh')	followed_by	Model
Activation('relu')	call	Activation
.t_sgan_sn_deconv	call	Input
Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')	call	Conv2DTranspose
.t_sgan_sn_deconv	call	Subtract()
range	has_arg0	1
shuffle	followed_by	Input
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')	call	Conv2DTranspose
BatchNormalization()	followed_by	Activation('relu')
.t_sgan_sn_deconv	call	GlobalAveragePooling2D()
Subtract()	followed_by	Subtract()
.t_sgan_sn_deconv	call	BatchNormalization()
sample	call	range
Adam	has_arg0	0.0002
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
Model	followed_by	Input
add_loss	followed_by	Adam
LeakyReLU(0.2)	followed_by	Model
.t_sgan_sn_deconv	call	range
BatchNormalization()	call	BatchNormalization
.t_sgan_sn_deconv	call	Activation('tanh')
.t_sgan_sn_deconv	call	data_generator
Model	followed_by	mean
Activation('tanh')	call	Activation
Conv2DTranspose	has_padding	same
GlobalAveragePooling2D()	followed_by	Model
LeakyReLU(0.2)	call	LeakyReLU
Input	has_shape	(K.int_shape(x)[-1],)
.t_sgan_sn_deconv	call	mean
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
Input	has_shape	(img_dim, img_dim, 3)
Dense(f_size ** 2 * max_num_channels)	call	Dense
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Reshape((f_size, f_size, max_num_channels))	call	reshape
Activation	has_arg0	relu
Conv2DTranspose	has_arg1	(4, 4)
mean	followed_by	add_loss
Subtract()	followed_by	Model
Adam	has_arg1	0.5
log_sigmoid	followed_by	log_sigmoid
LeakyReLU	has_arg0	0.2
Conv2DTranspose(num_channels, (4, 4), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Subtract()	call	Subtract
reshape	has_arg0	(f_size, f_size, max_num_channels)
.t_sgan_sn_deconv	call	shuffle
.t_sgan_sn_deconv	call	Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same')
Input	followed_by	LeakyReLU(0.2)
Conv2DTranspose	has_arg0	3
Subtract()	followed_by	Model
.t_sgan_sn_celeba_256	call	Adam
.t_sgan_sn_celeba_256	call	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Activation('tanh')	call	Activation
range	has_arg0	5
Input	followed_by	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2DTranspose	has_padding	same
Subtract()	call	Subtract
.t_sgan_sn_celeba_256	call	mean
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
LeakyReLU()	followed_by	range
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
.t_sgan_sn_celeba_256	call	Input
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
range	has_arg0	2
Activation('relu')	call	Activation
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
.t_sgan_sn_celeba_256	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Input	followed_by	Input
Adam	has_arg1	0.5
Model	followed_by	mean
sample	call	zeros
Adam	has_arg0	0.0002
Activation	has_arg0	relu
reshape	has_arg0	(4, 4, img_dim * 8)
range	has_arg0	8501
range	has_arg0	4
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_256	call	LeakyReLU()
Model	followed_by	Input
add_loss	followed_by	Adam
.t_sgan_sn_celeba_256	call	sample
Input	has_shape	(img_dim, img_dim, 3)
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Input	has_shape	(K.int_shape(x)[-1],)
Reshape((4, 4, img_dim * 8))	followed_by	range
Adam	followed_by	Subtract()
sample	call	range
LeakyReLU()	followed_by	GlobalAveragePooling2D()
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Reshape((4, 4, img_dim * 8))	call	reshape
mean	followed_by	add_loss
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_celeba_256	call	Dense(4 * 4 * img_dim * 8)
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
.t_sgan_sn_celeba_256	call	Activation('relu')
Input	followed_by	Dense(4 * 4 * img_dim * 8)
log	followed_by	log
.t_sgan_sn_celeba_256	call	Reshape((4, 4, img_dim * 8))
range	followed_by	sample
Conv2DTranspose	has_arg0	3
Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Input	followed_by	Subtract()
BatchNormalization()	call	BatchNormalization
.t_sgan_sn_celeba_256	call	BatchNormalization()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
Dense	has_arg0	512
BatchNormalization()	followed_by	Activation('relu')
range	followed_by	range
.t_sgan_sn_celeba_256	call	shuffle
Dense(4 * 4 * img_dim * 8)	call	Dense
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Activation	has_arg0	tanh
.t_sgan_sn_celeba_256	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_256	call	Subtract()
.t_sgan_sn_celeba_256	call	data_generator
zeros	followed_by	range
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
Conv2DTranspose	has_arg1	(5, 5)
Activation('tanh')	followed_by	Model
GlobalAveragePooling2D()	followed_by	Model
shuffle	followed_by	Input
mean	call	log
Conv2DTranspose	has_arg0	(5, 5)
.t_sgan_sn_celeba_256	call	range
.t_sgan_sn_celeba_256	call	Model
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
.t_sgan_sn_celeba_256	call	add_loss
data_generator	followed_by	range
.t_sgan_sn_celeba_256	call	BatchNormalization(gamma_constraint=spectral_normalization)
Adam	followed_by	data_generator
Subtract()	followed_by	Subtract()
range	has_arg0	1
Input	has_shape	(z_dim,)
.t_sgan_sn_celeba_256	call	Dense(512, kernel_constraint=spectral_normalization)
range	followed_by	Conv2D(img_dim * 2 ** i, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Dense	has_activation	sigmoid
.t_sgan_sn_celeba_256	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.t_sgan_sn_celeba_256	call	GlobalAveragePooling2D()
.t_sgan_sn_celeba_256	call	Conv2D(img_dim // 2, (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
LeakyReLU()	call	LeakyReLU
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Dense	has_arg0	1
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Conv2D	has_arg0	(5, 5)
.t_sgan_sn_celeba_256	call	Activation('tanh')
.t_sgan_sn_upsample	call	Input
Activation('relu')	followed_by	UpSampling2D()
Adam	followed_by	data_generator
.t_sgan_sn_upsample	call	Adam
log_sigmoid	followed_by	log_sigmoid
Subtract()	followed_by	Subtract()
mean	followed_by	add_loss
add_loss	followed_by	Adam
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
.t_sgan_sn_upsample	call	Conv2D(3, (4, 4), padding='same')
Subtract()	followed_by	Model
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Activation('tanh')	followed_by	Model
UpSampling2D()	followed_by	Conv2D(3, (4, 4), padding='same')
Input	followed_by	Subtract()
range	has_arg0	1
Conv2D(3, (4, 4), padding='same')	call	Conv2D
Conv2D(3, (4, 4), padding='same')	followed_by	Activation('tanh')
data_generator	followed_by	range
range	followed_by	UpSampling2D()
Input	followed_by	range
Adam	followed_by	Subtract()
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sgan_sn_upsample	call	Activation('relu')
BatchNormalization()	followed_by	Activation('relu')
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
Model	followed_by	mean
sample	call	zeros
Activation('relu')	call	Activation
Input	has_shape	(K.int_shape(x)[-1],)
Conv2D	has_arg1	(4, 4)
.t_sgan_sn_upsample	call	Reshape((f_size, f_size, max_num_channels))
mean	call	log_sigmoid
.t_sgan_sn_upsample	call	sample
UpSampling2D()	followed_by	Conv2D(num_channels, (4, 4), padding='same')
.t_sgan_sn_upsample	call	range
Subtract()	call	Subtract
Activation	has_arg0	relu
.t_sgan_sn_upsample	call	Conv2D(num_channels, (4, 4), padding='same')
range	followed_by	range
.t_sgan_sn_upsample	call	shuffle
Reshape((f_size, f_size, max_num_channels))	call	reshape
Model	followed_by	Input
Conv2D	has_arg0	(4, 4)
Conv2D(num_channels, (4, 4), padding='same')	call	Conv2D
reshape	has_arg0	(f_size, f_size, max_num_channels)
Conv2D	has_arg0	3
Dense(f_size ** 2 * max_num_channels)	call	Dense
.t_sgan_sn_upsample	call	BatchNormalization()
.t_sgan_sn_upsample	call	data_generator
LeakyReLU(0.2)	followed_by	Model
UpSampling2D()	call	UpSampling2D
GlobalAveragePooling2D()	followed_by	Model
shuffle	followed_by	Input
Activation	has_arg0	tanh
Input	followed_by	LeakyReLU(0.2)
Adam	has_arg1	0.5
.t_sgan_sn_upsample	call	Model
LeakyReLU	has_arg0	0.2
BatchNormalization()	call	BatchNormalization
Activation('tanh')	call	Activation
Conv2D(num_channels, (4, 4), padding='same')	followed_by	BatchNormalization()
.t_sgan_sn_upsample	call	Dense(f_size ** 2 * max_num_channels)
.t_sgan_sn_upsample	call	Subtract()
Input	followed_by	Input
.t_sgan_sn_upsample	call	UpSampling2D()
.t_sgan_sn_upsample	call	GlobalAveragePooling2D()
LeakyReLU(0.2)	call	LeakyReLU
.t_sgan_sn_upsample	call	mean
range	followed_by	LeakyReLU(0.2)
Input	has_shape	(z_dim,)
range	has_arg0	2
Conv2D	has_padding	same
range	followed_by	sample
.t_sgan_sn_upsample	call	LeakyReLU(0.2)
sample	call	range
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
zeros	followed_by	range
.t_sgan_sn_upsample	call	add_loss
Adam	has_arg0	0.0002
Input	has_shape	(img_dim, img_dim, 3)
.t_sgan_sn_upsample	call	Activation('tanh')
UpSampling2D()	followed_by	ZeroPadding2D()
.t_sagan_celeba	call	Add()
sample	call	zeros
range	followed_by	range
add_loss	followed_by	Adam
mean	followed_by	add_loss
Input	followed_by	Subtract()
Adam	followed_by	data_generator
BatchNormalization()	call	BatchNormalization
Activation('relu')	followed_by	UpSampling2D()
Input	has_shape	(img_dim, img_dim, 3)
.t_sagan_celeba	call	Model
.t_sagan_celeba	call	range
Add()	call	Add
Adam	has_arg0	0.0002
Input	followed_by	Input
Input	has_shape	(K.int_shape(x)[-1],)
Reshape((1, 1, z_dim))	followed_by	BatchNormalization()
Subtract()	followed_by	Subtract()
Adam	has_arg1	0.5
Model	followed_by	mean
Adam	followed_by	Subtract()
Activation('relu')	followed_by	range
Reshape((1, 1, z_dim))	call	reshape
.t_sagan_celeba	call	Reshape((1, 1, z_dim))
Activation('tanh')	followed_by	Model
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
range	followed_by	UpSampling2D()
.t_sagan_celeba	call	Adam
LeakyReLU(0.2)	followed_by	Add()
ZeroPadding2D()	followed_by	LeakyReLU(0.2)
.t_sagan_celeba	call	ZeroPadding2D()
.t_sagan_celeba	call	BatchNormalization()
BatchNormalization()	followed_by	Activation('relu')
LeakyReLU(0.2)	followed_by	range
Activation('relu')	followed_by	Add()
Model	followed_by	Input
LeakyReLU(0.2)	call	LeakyReLU
log_sigmoid	followed_by	log_sigmoid
.t_sagan_celeba	call	Activation('tanh')
.t_sagan_celeba	call	UpSampling2D()
GlobalAveragePooling2D()	followed_by	Model
range	has_arg0	1
UpSampling2D()	call	UpSampling2D
range	followed_by	ZeroPadding2D()
sample	call	range
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
.t_sagan_celeba	call	Subtract()
.t_sagan_celeba	call	add_loss
Subtract()	call	Subtract
Activation	has_arg0	relu
data_generator	followed_by	range
Input	has_shape	(z_dim,)
Activation	has_arg0	tanh
ZeroPadding2D()	followed_by	Activation('tanh')
LeakyReLU	has_arg0	0.2
Add()	followed_by	range
Activation('relu')	call	Activation
ZeroPadding2D()	followed_by	BatchNormalization()
.t_sagan_celeba	call	Input
mean	call	log_sigmoid
.t_sagan_celeba	call	GlobalAveragePooling2D()
Subtract()	followed_by	Model
.t_sagan_celeba	call	LeakyReLU(0.2)
.t_sagan_celeba	call	shuffle
.t_sagan_celeba	call	data_generator
range	followed_by	sample
Input	followed_by	Reshape((1, 1, z_dim))
Input	followed_by	Model
.t_sagan_celeba	call	Activation('relu')
Input	followed_by	ZeroPadding2D()
range	has_arg0	2
ZeroPadding2D()	call	ZeroPadding2D
.t_sagan_celeba	call	sample
zeros	followed_by	range
Activation('tanh')	call	Activation
.t_sagan_celeba	call	mean
shuffle	followed_by	Input
reshape	has_arg0	(1, 1, z_dim)
l2_normalize	followed_by	l2_normalize
l2_normalize	followed_by	transpose
spectral_normalization	call	spectral_norm
range	followed_by	l2_normalize
spectral_norm	call	transpose
spectral_norm	call	ones
spectral_normalization	followed_by	spectral_normalization
l2_normalize	call	transpose
ones	has_arg0	(1, in_dim)
reshape	followed_by	ones
t_sagan_celeba.SpectralNormalization.__call__	call	spectral_normalization
ones	followed_by	range
spectral_norm	call	reshape
spectral_norm	call	l2_normalize
spectral_norm	call	range
reshape	has_arg0	(in_dim, out_dim)
FID.__init__	followed_by	distance
FID.__init__	call	get_mu_sigma
distance	call	real
distance	call	sqrtm
get_mu_sigma	followed_by	sqrtm
.fid_keras	call	FID.__init__
distance	call	get_mu_sigma
sqrtm	followed_by	real
real	call	trace
get_mu_sigma	call	mean
.fid_keras	call	distance
mean	has_arg0	0
Adam	has_arg0	0.0002
Conv2DTranspose	has_padding	same
.t_sgan_sn_celeba_64	call	range
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
Model	followed_by	Input
Dense(4 * 4 * img_dim * 8)	call	Dense
.t_sgan_sn_celeba_64	call	GlobalAveragePooling2D()
zeros	followed_by	range
LeakyReLU()	followed_by	GlobalAveragePooling2D()
.t_sgan_sn_celeba_64	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
.t_sgan_sn_celeba_64	call	mean
.t_sgan_sn_celeba_64	call	Input
Input	has_shape	(img_dim, img_dim, 3)
Adam	followed_by	Subtract()
Activation	has_arg0	relu
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2D	has_arg0	(5, 5)
Activation('tanh')	followed_by	Model
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Input	followed_by	Dense(4 * 4 * img_dim * 8)
sample	call	zeros
BatchNormalization()	followed_by	Activation('relu')
LeakyReLU()	call	LeakyReLU
range	has_arg0	3
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
shuffle	followed_by	Input
Subtract()	call	Subtract
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
BatchNormalization()	call	BatchNormalization
.t_sgan_sn_celeba_64	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Model	followed_by	mean
add_loss	followed_by	Adam
mean	followed_by	add_loss
GlobalAveragePooling2D()	followed_by	Model
Input	followed_by	Input
.t_sgan_sn_celeba_64	call	Dense(4 * 4 * img_dim * 8)
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_celeba_64	call	shuffle
mean	call	log
Activation('tanh')	call	Activation
.t_sgan_sn_celeba_64	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
range	has_arg0	1
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Dense	has_activation	sigmoid
Activation	has_arg0	tanh
Subtract()	followed_by	Subtract()
Dense	has_arg0	512
Conv2DTranspose	has_arg0	3
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_64	call	Activation('relu')
Input	has_shape	(K.int_shape(x)[-1],)
Dense	has_arg0	1
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_celeba_64	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
.t_sgan_sn_celeba_64	call	Reshape((4, 4, img_dim * 8))
data_generator	followed_by	range
sample	call	range
Reshape((4, 4, img_dim * 8))	call	reshape
Input	followed_by	Subtract()
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_celeba_64	call	Activation('tanh')
range	has_arg0	2
.t_sgan_sn_celeba_64	call	Adam
.t_sgan_sn_celeba_64	call	Dense(512, kernel_constraint=spectral_normalization)
.t_sgan_sn_celeba_64	call	Subtract()
reshape	has_arg0	(4, 4, img_dim * 8)
Activation('relu')	call	Activation
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
Conv2DTranspose	has_arg0	(5, 5)
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
.t_sgan_sn_celeba_64	call	LeakyReLU()
Adam	followed_by	data_generator
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose	has_arg1	(5, 5)
.t_sgan_sn_celeba_64	call	data_generator
.t_sgan_sn_celeba_64	call	BatchNormalization()
.t_sgan_sn_celeba_64	call	sample
Adam	has_arg1	0.5
.t_sgan_sn_celeba_64	call	Model
Reshape((4, 4, img_dim * 8))	followed_by	range
Input	has_shape	(z_dim,)
Subtract()	followed_by	Model
.t_sgan_sn_celeba_64	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
range	followed_by	sample
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
log	followed_by	log
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
range	followed_by	range
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
.t_sgan_sn_celeba_64	call	add_loss
LeakyReLU()	followed_by	range
.t_sgan_sn_celeba_64	call	BatchNormalization(gamma_constraint=spectral_normalization)
range	followed_by	sample
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
range	has_arg0	1
Adam	followed_by	Subtract()
Adam	followed_by	data_generator
Reshape((4, 4, img_dim * 8))	followed_by	range
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Dense(4 * 4 * img_dim * 8)	call	Dense
Activation	has_arg0	relu
Input	has_shape	(img_dim, img_dim, 3)
data_generator	followed_by	range
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
reshape	has_arg0	(4, 4, img_dim * 8)
Dense	has_arg0	512
.t_wgan_sn_celeba_64	call	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_64	call	Dense(512, kernel_constraint=spectral_normalization)
Subtract()	followed_by	Subtract()
.t_wgan_sn_celeba_64	call	Activation('relu')
LeakyReLU()	call	LeakyReLU
.t_wgan_sn_celeba_64	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Activation('tanh')	call	Activation
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_wgan_sn_celeba_64	call	BatchNormalization()
Input	followed_by	Input
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Subtract()	followed_by	Model
.t_wgan_sn_celeba_64	call	Model
range	has_arg0	2
range	has_arg0	3
Conv2DTranspose	has_padding	same
Conv2D	has_arg0	(5, 5)
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Model	followed_by	mean
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_wgan_sn_celeba_64	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
shuffle	followed_by	Input
Input	has_shape	(K.int_shape(x)[-1],)
Conv2DTranspose	has_arg0	(5, 5)
.t_wgan_sn_celeba_64	call	Input
Dense	has_activation	sigmoid
.t_wgan_sn_celeba_64	call	Activation('tanh')
.t_wgan_sn_celeba_64	call	add_loss
add_loss	followed_by	Adam
Model	followed_by	Input
Reshape((4, 4, img_dim * 8))	call	reshape
.t_wgan_sn_celeba_64	call	shuffle
Activation('relu')	call	Activation
.t_wgan_sn_celeba_64	call	Reshape((4, 4, img_dim * 8))
zeros	followed_by	range
.t_wgan_sn_celeba_64	call	GlobalAveragePooling2D()
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
mean	followed_by	add_loss
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	3
.t_wgan_sn_celeba_64	call	range
.t_wgan_sn_celeba_64	call	sample
Activation	has_arg0	tanh
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
.t_wgan_sn_celeba_64	call	BatchNormalization(gamma_constraint=spectral_normalization)
.t_wgan_sn_celeba_64	call	Adam
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
.t_wgan_sn_celeba_64	call	Subtract()
.t_wgan_sn_celeba_64	call	data_generator
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
.t_wgan_sn_celeba_64	call	LeakyReLU()
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	call	Conv2D
GlobalAveragePooling2D()	followed_by	Model
Input	followed_by	Subtract()
range	followed_by	range
sample	call	range
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Activation('tanh')	followed_by	Model
Subtract()	call	Subtract
BatchNormalization()	followed_by	Activation('relu')
Adam	has_arg0	0.0002
Dense	has_arg0	1
.t_wgan_sn_celeba_64	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
.t_wgan_sn_celeba_64	call	mean
Conv2DTranspose	has_arg1	(5, 5)
LeakyReLU()	followed_by	range
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
sample	call	zeros
BatchNormalization()	call	BatchNormalization
.t_wgan_sn_celeba_64	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
LeakyReLU()	followed_by	GlobalAveragePooling2D()
.t_wgan_sn_celeba_64	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Adam	has_arg1	0.5
Input	has_shape	(z_dim,)
range	followed_by	sample
Conv2D	has_padding	same
Input	has_shape	(img_dim, img_dim, 3)
Model	followed_by	Input
LeakyReLU	has_arg0	0.2
.sgan_deconv_no_sn_loss_bias	call	Model
Adam	has_arg0	0.0002
.sgan_deconv_no_sn_loss_bias	call	BatchNormalization()
.sgan_deconv_no_sn_loss_bias	call	add_loss
reshape	has_arg0	(f_size, f_size, max_num_channels)
.sgan_deconv_no_sn_loss_bias	call	range
Adam	followed_by	data_generator
data_generator	followed_by	range
.sgan_deconv_no_sn_loss_bias	call	sample
BatchNormalization()	followed_by	LeakyReLU(0.2)
Activation('tanh')	call	Activation
mean	followed_by	add_loss
Activation('tanh')	followed_by	Model
BatchNormalization()	followed_by	Activation('relu')
Model	followed_by	mean
.sgan_deconv_no_sn_loss_bias	call	Dense(f_size ** 2 * max_num_channels)
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	call	Conv2D
.sgan_deconv_no_sn_loss_bias	call	Reshape((f_size, f_size, max_num_channels))
sample	call	range
.sgan_deconv_no_sn_loss_bias	call	Input
Dense	call	log
Dense(f_size ** 2 * max_num_channels)	followed_by	BatchNormalization()
BatchNormalization()	call	BatchNormalization
range	has_arg0	2
Activation	has_arg0	relu
.sgan_deconv_no_sn_loss_bias	call	LeakyReLU(0.2)
Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))	followed_by	Model
.sgan_deconv_no_sn_loss_bias	call	Activation('relu')
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
sample	call	zeros
mean	call	log_sigmoid
.sgan_deconv_no_sn_loss_bias	call	mean
.sgan_deconv_no_sn_loss_bias	call	GlobalAveragePooling2D()
Activation('relu')	followed_by	Reshape((f_size, f_size, max_num_channels))
Conv2DTranspose	has_padding	same
log	followed_by	softplus
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
GlobalAveragePooling2D()	followed_by	Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))
Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))	call	Dense
Conv2DTranspose	has_arg0	3
Adam	followed_by	Model
range	followed_by	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
.sgan_deconv_no_sn_loss_bias	call	Adam
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
.sgan_deconv_no_sn_loss_bias	call	Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')
.sgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
range	followed_by	Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')
Dense	has_arg0	1
.sgan_deconv_no_sn_loss_bias	call	shuffle
Conv2DTranspose(num_channels, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
range	followed_by	range
.sgan_deconv_no_sn_loss_bias	call	Activation('tanh')
.sgan_deconv_no_sn_loss_bias	call	data_generator
add_loss	followed_by	Adam
.sgan_deconv_no_sn_loss_bias	call	Dense(1, use_bias=False, activation=lambda t: K.log(2.0) - K.softplus(t))
Activation	has_arg0	tanh
Conv2DTranspose	has_arg0	(5, 5)
Input	followed_by	range
LeakyReLU(0.2)	call	LeakyReLU
Conv2D	has_arg0	(5, 5)
Reshape((f_size, f_size, max_num_channels))	followed_by	range
Input	followed_by	Model
LeakyReLU(0.2)	followed_by	GlobalAveragePooling2D()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
log_sigmoid	followed_by	log_sigmoid
Input	followed_by	Input
.sgan_deconv_no_sn_loss_bias	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Adam	has_arg1	0.5
log	has_arg0	2.0
Input	followed_by	Dense(f_size ** 2 * max_num_channels)
Conv2D(num_channels, (5, 5), strides=(2, 2), use_bias=False, padding='same')	followed_by	BatchNormalization()
Activation('relu')	call	Activation
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Dense	call	softplus
shuffle	followed_by	Input
Conv2DTranspose	has_arg1	(5, 5)
Reshape((f_size, f_size, max_num_channels))	call	reshape
zeros	followed_by	range
Dense(f_size ** 2 * max_num_channels)	call	Dense
Input	has_shape	(z_dim,)
t_sagan_u_celeba.SpectralNormalization.__call__	call	spectral_normalization
spectral_norm	call	l2_normalize
spectral_norm	call	transpose
ones	followed_by	range
reshape	followed_by	ones
spectral_normalization	call	spectral_norm
spectral_norm	call	reshape
range	followed_by	l2_normalize
spectral_norm	call	range
spectral_norm	call	ones
l2_normalize	followed_by	l2_normalize
reshape	has_arg0	(in_dim, out_dim)
l2_normalize	followed_by	transpose
ones	has_arg0	(1, in_dim)
spectral_normalization	followed_by	spectral_normalization
l2_normalize	call	transpose
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
.t_wgan_sn_celeba_128	call	add_loss
range	has_arg0	2
Conv2DTranspose	has_padding	same
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
GlobalAveragePooling2D()	followed_by	Model
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	call	Conv2D
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
Input	followed_by	Input
range	followed_by	range
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
.t_wgan_sn_celeba_128	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
.t_wgan_sn_celeba_128	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg1	(5, 5)
Adam	followed_by	data_generator
Activation('tanh')	followed_by	Model
.t_wgan_sn_celeba_128	call	Input
.t_wgan_sn_celeba_128	call	LeakyReLU()
.t_wgan_sn_celeba_128	call	mean
.t_wgan_sn_celeba_128	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Activation('tanh')	call	Activation
Input	followed_by	Subtract()
.t_wgan_sn_celeba_128	call	data_generator
.t_wgan_sn_celeba_128	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Reshape((4, 4, img_dim * 8))	call	reshape
Input	has_shape	(img_dim, img_dim, 3)
.t_wgan_sn_celeba_128	call	BatchNormalization()
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
sample	call	range
add_loss	followed_by	Adam
Model	followed_by	Input
mean	followed_by	add_loss
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
Subtract()	followed_by	Model
Model	followed_by	mean
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
data_generator	followed_by	range
.t_wgan_sn_celeba_128	call	GlobalAveragePooling2D()
Input	has_shape	(K.int_shape(x)[-1],)
.t_wgan_sn_celeba_128	call	shuffle
LeakyReLU()	call	LeakyReLU
Dense	has_arg0	1
.t_wgan_sn_celeba_128	call	Dense(512, kernel_constraint=spectral_normalization)
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Adam	has_arg1	0.5
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
BatchNormalization()	followed_by	Activation('relu')
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_wgan_sn_celeba_128	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
BatchNormalization()	call	BatchNormalization
range	has_arg0	4
reshape	has_arg0	(4, 4, img_dim * 8)
zeros	followed_by	range
.t_wgan_sn_celeba_128	call	Subtract()
.t_wgan_sn_celeba_128	call	Reshape((4, 4, img_dim * 8))
Conv2DTranspose	has_arg0	(5, 5)
Activation('relu')	call	Activation
.t_wgan_sn_celeba_128	call	Activation('relu')
Adam	followed_by	Subtract()
.t_wgan_sn_celeba_128	call	Model
.t_wgan_sn_celeba_128	call	BatchNormalization(gamma_constraint=spectral_normalization)
LeakyReLU()	followed_by	GlobalAveragePooling2D()
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
.t_wgan_sn_celeba_128	call	range
.t_wgan_sn_celeba_128	call	Activation('tanh')
Subtract()	followed_by	Subtract()
range	has_arg0	3
range	has_arg0	1
Conv2DTranspose	has_arg0	3
Activation	has_arg0	tanh
sample	call	zeros
Activation	has_arg0	relu
Input	has_shape	(z_dim,)
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
Reshape((4, 4, img_dim * 8))	followed_by	range
LeakyReLU()	followed_by	range
Dense(4 * 4 * img_dim * 8)	call	Dense
Dense	has_activation	sigmoid
range	followed_by	sample
.t_wgan_sn_celeba_128	call	Adam
shuffle	followed_by	Input
.t_wgan_sn_celeba_128	call	Dense(4 * 4 * img_dim * 8)
Input	followed_by	Dense(4 * 4 * img_dim * 8)
.t_wgan_sn_celeba_128	call	sample
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Subtract()	call	Subtract
Adam	has_arg0	0.0002
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
Dense	has_arg0	512
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Conv2D	has_arg0	(5, 5)
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_celeba_128	call	GlobalAveragePooling2D()
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	call	Conv2D
Model	followed_by	Input
Input	followed_by	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	(5, 5)
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
mean	call	log
Adam	has_arg1	0.5
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
add_loss	followed_by	Adam
shuffle	followed_by	Input
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
.t_sgan_sn_celeba_128	call	Subtract()
Input	followed_by	Subtract()
Input	has_shape	(img_dim, img_dim, 3)
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
range	followed_by	range
range	has_arg0	1
Activation('relu')	call	Activation
range	followed_by	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
.t_sgan_sn_celeba_128	call	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
Conv2D	has_arg0	(5, 5)
.t_sgan_sn_celeba_128	call	Reshape((4, 4, img_dim * 8))
.t_sgan_sn_celeba_128	call	data_generator
sample	call	zeros
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.t_sgan_sn_celeba_128	call	Model
Subtract()	followed_by	Subtract()
Activation	has_arg0	relu
Dense	has_arg0	1
zeros	followed_by	range
Input	has_shape	(K.int_shape(x)[-1],)
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
LeakyReLU()	followed_by	GlobalAveragePooling2D()
range	has_arg0	4
.t_sgan_sn_celeba_128	call	Dense(512, kernel_constraint=spectral_normalization)
Reshape((4, 4, img_dim * 8))	call	reshape
Model	followed_by	mean
.t_sgan_sn_celeba_128	call	Dense(4 * 4 * img_dim * 8)
reshape	has_arg0	(4, 4, img_dim * 8)
Activation('relu')	followed_by	Reshape((4, 4, img_dim * 8))
Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')	followed_by	Activation('tanh')
range	followed_by	sample
.t_sgan_sn_celeba_128	call	shuffle
Subtract()	followed_by	Model
LeakyReLU()	followed_by	range
Input	followed_by	Dense(4 * 4 * img_dim * 8)
Adam	has_arg0	0.0002
.t_sgan_sn_celeba_128	call	LeakyReLU()
Adam	followed_by	Subtract()
Input	followed_by	Dense(512, kernel_constraint=spectral_normalization)
Activation('tanh')	followed_by	Model
Subtract()	call	Subtract
.t_sgan_sn_celeba_128	call	BatchNormalization(gamma_constraint=spectral_normalization)
Dense(512, kernel_constraint=spectral_normalization)	call	Dense
range	has_arg0	2
data_generator	followed_by	range
Dense	has_activation	sigmoid
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	followed_by	BatchNormalization()
Input	has_shape	(z_dim,)
BatchNormalization()	call	BatchNormalization
Dense(512, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU()
mean	followed_by	add_loss
Dense	has_arg0	512
LeakyReLU()	call	LeakyReLU
.t_sgan_sn_celeba_128	call	sample
.t_sgan_sn_celeba_128	call	Input
Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_celeba_128	call	Adam
.t_sgan_sn_celeba_128	call	add_loss
.t_sgan_sn_celeba_128	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
Activation('relu')	followed_by	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
Adam	followed_by	data_generator
.t_sgan_sn_celeba_128	call	Conv2D(img_dim, (5, 5), strides=(2, 2), padding='same', kernel_constraint=spectral_normalization)
GlobalAveragePooling2D()	followed_by	Model
BatchNormalization()	followed_by	Activation('relu')
Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2DTranspose	has_arg1	(5, 5)
.t_sgan_sn_celeba_128	call	Activation('relu')
.t_sgan_sn_celeba_128	call	mean
range	has_arg0	3
sample	call	range
Conv2DTranspose	has_padding	same
Dense(4 * 4 * img_dim * 8)	call	Dense
.t_sgan_sn_celeba_128	call	Conv2DTranspose(3, (5, 5), strides=(2, 2), padding='same')
.t_sgan_sn_celeba_128	call	range
.t_sgan_sn_celeba_128	call	Activation('tanh')
Activation('tanh')	call	Activation
LeakyReLU()	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
Input	followed_by	Input
Dense(4 * 4 * img_dim * 8)	followed_by	BatchNormalization()
.t_sgan_sn_celeba_128	call	Conv2D(img_dim * 2 ** (i + 1), (5, 5), strides=(2, 2), padding='same',kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	3
.t_sgan_sn_celeba_128	call	BatchNormalization()
Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')	call	Conv2DTranspose
range	followed_by	Conv2DTranspose(img_dim * 4 // 2 ** i, (5, 5), strides=(2, 2), padding='same')
log	followed_by	log
Reshape((4, 4, img_dim * 8))	followed_by	range
Activation	has_arg0	tanh
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Dense	has_arg0	1
LeakyReLU(0.1)	followed_by	Conv2DTranspose(128, (4, 4), strides=(2, 2))
Conv2DTranspose(32, (4, 4), strides=(2, 2))	call	Conv2DTranspose
Dense(256, kernel_constraint=spectral_normalization)	call	Dense
Input	followed_by	Input
Adam	followed_by	range
sample	call	range
Subtract()	followed_by	Subtract()
Input	followed_by	Dense(256, kernel_constraint=spectral_normalization)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (4, 4), strides=(2, 2))
Conv2D	has_activation	tanh
.t_sgan_sn_cifar10	call	LeakyReLU()
Conv2D	has_arg0	3
log	followed_by	log
Conv2DTranspose	has_arg1	(4, 4)
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	call	Dense
LeakyReLU()	followed_by	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
.t_sgan_sn_cifar10	call	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Conv2D(32, (1, 1), strides=(1, 1))
Conv2DTranspose(64, (4, 4), strides=(1, 1))	call	Conv2DTranspose
.t_sgan_sn_cifar10	call	Dense(256, kernel_constraint=spectral_normalization)
Adam	has_arg1	0.5
Input	has_shape	(img_dim, img_dim, 3)
LeakyReLU()	call	LeakyReLU
Conv2DTranspose(128, (4, 4), strides=(2, 2))	call	Conv2DTranspose
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Adam	has_arg0	0.0002
GlobalAveragePooling2D()	followed_by	Model
.t_sgan_sn_cifar10	call	Adam
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	followed_by	Model
Conv2DTranspose(256, (4, 4), strides=(1, 1))	call	Conv2DTranspose
Subtract()	followed_by	Model
Dense	has_activation	sigmoid
.t_sgan_sn_cifar10	call	sample
BatchNormalization()	call	BatchNormalization
Conv2D	has_arg0	256
range	has_arg0	1
range	has_arg0	2
Input	followed_by	Reshape((1, 1, z_dim))
Input	followed_by	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
load_data	followed_by	Input
.t_sgan_sn_cifar10	call	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	GlobalAveragePooling2D()
.t_sgan_sn_cifar10	call	Reshape((1, 1, z_dim))
.t_sgan_sn_cifar10	call	add_loss
Conv2DTranspose	has_arg0	128
Conv2D	has_arg0	32
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Input	has_shape	(K.int_shape(x)[-1],)
Model	followed_by	mean
Reshape((1, 1, z_dim))	followed_by	Conv2DTranspose(256, (4, 4), strides=(1, 1))
Conv2DTranspose	has_arg0	64
mean	followed_by	add_loss
range	followed_by	sample
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
Conv2DTranspose(256, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
LeakyReLU()	followed_by	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
LeakyReLU()	followed_by	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
LeakyReLU	has_arg0	0.1
Input	has_shape	(z_dim,)
.t_sgan_sn_cifar10	call	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Conv2DTranspose(64, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
Conv2DTranspose	has_strides	(2, 2)
sample	call	zeros
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2D	has_arg0	64
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Reshape((1, 1, z_dim))	call	reshape
Conv2D	has_arg1	(1, 1)
Conv2D	has_arg1	(4, 4)
LeakyReLU(0.1)	followed_by	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
Conv2DTranspose	has_arg1	(5, 5)
Conv2D	has_strides	(1, 1)
Input	followed_by	Subtract()
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2D(32, (1, 1), strides=(1, 1))	call	Conv2D
.t_sgan_sn_cifar10	call	range
.t_sgan_sn_cifar10	call	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	LeakyReLU(0.1)
.t_sgan_sn_cifar10	call	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	mean
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
zeros	followed_by	range
.t_sgan_sn_cifar10	call	Input
.t_sgan_sn_cifar10	call	Conv2DTranspose(128, (4, 4), strides=(2, 2))
.t_sgan_sn_cifar10	call	BatchNormalization()
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (5, 5), strides=(1, 1))
LeakyReLU()	followed_by	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Model
Adam	followed_by	Subtract()
.t_sgan_sn_cifar10	call	Subtract()
Conv2D	has_arg1	(5, 5)
BatchNormalization()	followed_by	LeakyReLU(0.1)
Model	followed_by	Input
Conv2D(32, (1, 1), strides=(1, 1))	followed_by	BatchNormalization()
LeakyReLU(0.1)	followed_by	Conv2DTranspose(64, (4, 4), strides=(1, 1))
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
reshape	has_arg0	(1, 1, z_dim)
Conv2DTranspose	has_arg0	32
Dense	has_arg0	256
Conv2DTranspose(32, (5, 5), strides=(1, 1))	followed_by	BatchNormalization()
.t_sgan_sn_cifar10	call	Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	GlobalAveragePooling2D()
Conv2DTranspose(128, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
.t_sgan_sn_cifar10	call	Conv2DTranspose(32, (5, 5), strides=(1, 1))
Dense(1, use_bias=False, kernel_constraint=spectral_normalization,activation='sigmoid')	followed_by	Model
LeakyReLU(0.1)	followed_by	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
Conv2DTranspose	has_arg0	256
Subtract()	call	Subtract
.t_sgan_sn_cifar10	call	Conv2DTranspose(32, (4, 4), strides=(2, 2))
Conv2D	has_arg0	128
add_loss	followed_by	Adam
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	call	Conv2D
LeakyReLU(0.1)	followed_by	Conv2D(32, (1, 1), strides=(1, 1))
Conv2DTranspose(32, (5, 5), strides=(1, 1))	call	Conv2DTranspose
range	followed_by	range
Conv2DTranspose(32, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
Dense(256, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU(0.1)
.t_sgan_sn_cifar10	call	load_data
Conv2D	has_arg0	(1, 1)
LeakyReLU(0.1)	call	LeakyReLU
.t_sgan_sn_cifar10	call	Conv2DTranspose(256, (4, 4), strides=(1, 1))
.t_sgan_sn_cifar10	call	BatchNormalization(gamma_constraint=spectral_normalization)
.t_sgan_sn_cifar10	call	Conv2DTranspose(64, (4, 4), strides=(1, 1))
mean	call	log
Conv2DTranspose	has_strides	(1, 1)
l2_normalize	call	transpose
range	followed_by	l2_normalize
t_sgan_sn_upsample.SpectralNormalization.__call__	call	spectral_normalization
ones	has_arg0	(1, in_dim)
spectral_normalization	followed_by	spectral_normalization
reshape	has_arg0	(in_dim, out_dim)
reshape	followed_by	ones
spectral_normalization	call	spectral_norm
ones	followed_by	range
spectral_norm	call	ones
l2_normalize	followed_by	l2_normalize
spectral_norm	call	l2_normalize
spectral_norm	call	transpose
l2_normalize	followed_by	transpose
spectral_norm	call	range
spectral_norm	call	reshape
range	followed_by	range
.sgan_sn_cifar10	call	BatchNormalization(gamma_constraint=spectral_normalization)
GlobalAveragePooling2D()	followed_by	Dense(256, kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=spectral_normalization)
reshape	has_arg0	(1, 1, z_dim)
LeakyReLU(0.1)	followed_by	Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
Model	followed_by	Input
.sgan_sn_cifar10	call	Adam
add_loss	call	mean
Input	followed_by	Input
Conv2D	has_strides	(1, 1)
Conv2D	has_arg1	(4, 4)
LeakyReLU()	followed_by	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	GlobalAveragePooling2D()
Conv2D	has_arg0	3
Conv2D	has_arg1	(1, 1)
Adam	followed_by	Model
GlobalAveragePooling2D()	call	GlobalAveragePooling2D
mean	call	log
zeros	has_arg0	(img_dim * n, img_dim * n, 3)
.sgan_sn_cifar10	call	Reshape((1, 1, z_dim))
.sgan_sn_cifar10	call	Conv2DTranspose(32, (4, 4), strides=(2, 2))
zeros	followed_by	range
Dense(256, kernel_constraint=spectral_normalization)	call	Dense
.sgan_sn_cifar10	call	BatchNormalization()
.sgan_sn_cifar10	call	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
range	has_arg0	1
Conv2D	has_arg0	32
BatchNormalization(gamma_constraint=spectral_normalization)	call	BatchNormalization
.sgan_sn_cifar10	call	Conv2DTranspose(256, (4, 4), strides=(1, 1))
Input	followed_by	Model
.sgan_sn_cifar10	call	sample
Conv2DTranspose(128, (4, 4), strides=(2, 2))	call	Conv2DTranspose
.sgan_sn_cifar10	call	Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2D	has_arg1	(5, 5)
Conv2D	has_arg0	256
LeakyReLU()	followed_by	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	LeakyReLU()
sample	call	zeros
.sgan_sn_cifar10	call	Conv2DTranspose(128, (4, 4), strides=(2, 2))
Conv2D	has_arg0	(1, 1)
load_data	followed_by	Input
LeakyReLU(0.1)	followed_by	Conv2D(32, (1, 1), strides=(1, 1))
Conv2DTranspose	has_strides	(2, 2)
BatchNormalization(gamma_constraint=spectral_normalization)	followed_by	LeakyReLU()
Conv2D	has_arg0	128
Conv2D(z_dim, (1, 1), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2DTranspose(128, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
.sgan_sn_cifar10	call	Conv2DTranspose(64, (4, 4), strides=(1, 1))
Model	followed_by	mean
.sgan_sn_cifar10	call	add_loss
Conv2D	has_arg0	64
Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=spectral_normalization)	call	Dense
sample	call	range
Conv2D(32, (1, 1), strides=(1, 1))	followed_by	BatchNormalization()
Conv2DTranspose(256, (4, 4), strides=(1, 1))	call	Conv2DTranspose
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Adam	has_arg1	0.5
Input	followed_by	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	GlobalAveragePooling2D()
log	followed_by	log
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
Conv2DTranspose(64, (4, 4), strides=(1, 1))	call	Conv2DTranspose
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (5, 5), strides=(1, 1))
LeakyReLU	has_arg0	0.1
Conv2DTranspose	has_arg0	64
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	call	Conv2D
.sgan_sn_cifar10	call	Dense(256, kernel_constraint=spectral_normalization)
Conv2D(32, (1, 1), strides=(1, 1))	call	Conv2D
Conv2D	has_activation	tanh
.sgan_sn_cifar10	call	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
Input	followed_by	Reshape((1, 1, z_dim))
LeakyReLU()	followed_by	Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	256
BatchNormalization()	followed_by	LeakyReLU(0.1)
.sgan_sn_cifar10	call	Conv2D(32, (1, 1), strides=(1, 1))
.sgan_sn_cifar10	call	Conv2DTranspose(32, (5, 5), strides=(1, 1))
.sgan_sn_cifar10	call	Conv2D(256, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
LeakyReLU(0.1)	followed_by	Conv2DTranspose(128, (4, 4), strides=(2, 2))
.sgan_sn_cifar10	call	Model
Conv2DTranspose(256, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
Input	has_shape	(z_dim,)
.sgan_sn_cifar10	call	mean
Model	followed_by	add_loss
Conv2DTranspose(32, (4, 4), strides=(2, 2))	call	Conv2DTranspose
Conv2DTranspose(64, (4, 4), strides=(1, 1))	followed_by	BatchNormalization()
Input	has_shape	(img_dim, img_dim, 3)
Conv2DTranspose	has_arg1	(5, 5)
Dense(256, kernel_constraint=spectral_normalization)	followed_by	LeakyReLU(0.1)
Adam	followed_by	range
add_loss	followed_by	Adam
Dense(1, use_bias=False, activation='sigmoid', kernel_constraint=spectral_normalization)	followed_by	Model
BatchNormalization()	call	BatchNormalization
Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Dense	has_arg0	256
Conv2DTranspose	has_arg0	128
Conv2DTranspose(32, (4, 4), strides=(2, 2))	followed_by	BatchNormalization()
LeakyReLU(0.1)	followed_by	Conv2DTranspose(64, (4, 4), strides=(1, 1))
Reshape((1, 1, z_dim))	call	reshape
Conv2DTranspose	has_arg1	(4, 4)
range	has_arg0	2
.sgan_sn_cifar10	call	Input
mean	followed_by	add_loss
Dense	has_arg0	1
range	followed_by	sample
LeakyReLU()	followed_by	Conv2D(64, (4, 4), strides=(2, 2), kernel_constraint=spectral_normalization)
.sgan_sn_cifar10	call	load_data
.sgan_sn_cifar10	call	range
Conv2D(128, (4, 4), strides=(1, 1), kernel_constraint=spectral_normalization)	followed_by	BatchNormalization(gamma_constraint=spectral_normalization)
Conv2DTranspose(32, (5, 5), strides=(1, 1))	call	Conv2DTranspose
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	followed_by	Model
.sgan_sn_cifar10	call	LeakyReLU(0.1)
Conv2DTranspose(32, (5, 5), strides=(1, 1))	followed_by	BatchNormalization()
.sgan_sn_cifar10	call	Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)
Conv2DTranspose	has_arg0	32
LeakyReLU(0.1)	followed_by	Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')
LeakyReLU(0.1)	call	LeakyReLU
LeakyReLU(0.1)	followed_by	Conv2DTranspose(32, (4, 4), strides=(2, 2))
Conv2D(3, (1, 1), strides=(1, 1), activation='tanh')	call	Conv2D
LeakyReLU()	call	LeakyReLU
Reshape((1, 1, z_dim))	followed_by	Conv2DTranspose(256, (4, 4), strides=(1, 1))
Conv2D(32, (5, 5), strides=(1, 1), kernel_constraint=spectral_normalization)	call	Conv2D
Adam	has_arg0	0.0002
Conv2DTranspose	has_strides	(1, 1)
spectral_norm	call	range
ones	followed_by	range
l2_normalize	call	transpose
spectral_norm	call	l2_normalize
l2_normalize	followed_by	l2_normalize
spectral_normalization	call	spectral_norm
spectral_normalization	followed_by	spectral_normalization
ones	has_arg0	(1, in_dim)
l2_normalize	followed_by	transpose
reshape	has_arg0	(in_dim, out_dim)
spectral_norm	call	ones
spectral_norm	call	reshape
range	followed_by	l2_normalize
spectral_norm	call	transpose
reshape	followed_by	ones
t_sgan_sn_deconv.SpectralNormalization.__call__	call	spectral_normalization
