VIPPruning.__init__	call	custom_model
Activation	has_arg0	softmax
List	followed_by	Model
compute_flops	call	range
abs	followed_by	argmin
Activation('relu')	followed_by	MaxPooling2D(pool_size=(2, 2))
Flatten()	followed_by	Dense(512)
Dense	has_arg0	10
VIPPruning.__init__	call	List
custom_model	call	List
range	followed_by	range
vip	call	sqrt
frozen_conv2D	followed_by	insert_fully
Input	followed_by	Conv2D(32, (3, 3), padding='same')
Dense(10)	call	Dense
.main	call	MaxPooling2D(pool_size=(2, 2))
frozen_conv2D	followed_by	categorical_crossentropy
Model(model.input, self.pool(model.get_layer(index=i).output))	call	Model
Dense(10)	followed_by	Activation('softmax')
Conv2D	has_arg1	(3, 3)
.main	call	Dense(512)
Dense(512)	followed_by	Activation('relu')
insert_fully	call	Activation('softmax')
generate_conv_model	call	Conv2D(activation=config['activation'], activity_regularizer=config['activity_regularizer'], bias_constraint=config['bias_constraint'],bias_regularizer=config['bias_regularizer'], data_format=config['data_format'], dilation_rate=config['dilation_rate'], filters=config['filters'], kernel_constraint=config['kernel_constraint'],kernel_regularizer=config['kernel_regularizer'], kernel_size=config['kernel_size'], name=config['name'], padding=config['padding'], strides=config['strides'], trainable=config['trainable'], use_bias=config['use_bias'], weights=weights)
flatten	followed_by	vip
Dropout(0.5)	call	Dropout
range	followed_by	reshape
.main	call	frozen_conv2D
range	followed_by	where
Dense	has_arg0	512
idxs_to_prune	call	find_closer_th
idxs_to_prune	call	where
Conv2D(32, (3, 3), padding='same')	followed_by	Activation('relu')
Input	followed_by	range
find_closer_th	call	range
argmax	has_axis	1
.main	call	VIPPruning.__init__
range	has_arg1	6
.main	call	Input
Dropout(0.5)	followed_by	Dense(10)
flatten	call	reshape
Activation('softmax')	followed_by	Model
Activation	has_arg0	relu
insert_fully	followed_by	categorical_crossentropy
argmax	followed_by	count_filters
MaxPooling2D	has_pool_size	(2, 2)
score_by_filter	call	range
MaxPooling2D(pool_size=(2, 2))	followed_by	Flatten()
Input	has_arg0	(32, 32, 3)
Model	followed_by	categorical_crossentropy
score_by_filter	call	mean
.main	call	Conv2D(32, (3, 3), padding='same')
range	followed_by	categorical_crossentropy
flatten	followed_by	abs
BatchNormalization(weights=weights)	followed_by	Conv2D(activation=config['activation'], activity_regularizer=config['activity_regularizer'], bias_constraint=config['bias_constraint'],bias_regularizer=config['bias_regularizer'], data_format=config['data_format'], dilation_rate=config['dilation_rate'], filters=config['filters'], kernel_constraint=config['kernel_constraint'],kernel_regularizer=config['kernel_regularizer'], kernel_size=config['kernel_size'], name=config['name'], padding=config['padding'], strides=config['strides'], trainable=config['trainable'], use_bias=config['use_bias'], weights=weights)
Input	followed_by	Model(model.input, self.pool(model.get_layer(index=i).output))
.main	call	Dense(10)
Dropout	has_arg0	0.5
Activation('relu')	followed_by	Dropout(0.5)
.main	call	max
.main	call	Activation('relu')
Flatten()	call	Flatten
range	has_arg0	1
rebuild_net	call	range
Dense(num_classes)	call	Dense
where	followed_by	abs
rebuild_net	followed_by	frozen_conv2D
insert_fully	call	Flatten()
to_categorical	followed_by	to_categorical
.main	call	Flatten()
Conv2D	has_padding	same
.main	call	Dropout(0.5)
VIPPruning.__init__	call	GlobalAveragePooling2D
fit	followed_by	List
to_categorical	has_arg0	10
rebuild_net	call	BatchNormalization(weights=weights)
insert_fully	call	Dropout(0.5)
custom_model	call	Model
reshape	has_arg0	(n_samples, -1)
Dense(num_classes)	followed_by	Activation('softmax')
Model	call	pool
range	followed_by	mean
fit	call	score_by_filter
List	followed_by	find_closer_th
Conv2D	has_arg0	32
vip	followed_by	score_by_filter
range	followed_by	zeros
Activation('relu')	followed_by	Conv2D(32, (3, 3))
generate_conv_model	call	range
Conv2D(32, (3, 3))	followed_by	Activation('relu')
idxs_to_prune	call	List
argmax	followed_by	argmax
rebuild_net	call	Input
.main	call	compute_flops
fit	call	abs
.main	call	insert_fully
Conv2D(activation=config['activation'], activity_regularizer=config['activity_regularizer'], bias_constraint=config['bias_constraint'],bias_regularizer=config['bias_regularizer'], data_format=config['data_format'], dilation_rate=config['dilation_rate'], filters=config['filters'], kernel_constraint=config['kernel_constraint'],kernel_regularizer=config['kernel_regularizer'], kernel_size=config['kernel_size'], name=config['name'], padding=config['padding'], strides=config['strides'], trainable=config['trainable'], use_bias=config['use_bias'], weights=weights)	call	Conv2D
find_closer_th	call	argmin
count_filters	followed_by	compute_flops
.main	call	idxs_to_prune
List	call	range
vip	call	zeros
zeros	has_arg0	(p,)
GlobalAveragePooling2D	followed_by	custom_model
Conv2D(64, (3, 3), padding='same')	call	Conv2D
.main	call	Conv2D(32, (3, 3))
Conv2D(64, (3, 3))	call	Conv2D
idxs_to_prune	call	range
idxs_to_prune	followed_by	rebuild_net
generate_conv_model	call	BatchNormalization(weights=weights)
.main	call	argmax
insert_fully	call	Dense(num_classes)
Activation('relu')	followed_by	Conv2D(64, (3, 3))
Conv2D(64, (3, 3))	followed_by	Activation('relu')
rebuild_net	call	Model
generate_conv_model	call	Input
flatten	followed_by	flatten
range	followed_by	VIPPruning.__init__
find_closer_th	call	zeros
compute_flops	followed_by	range
Conv2D(64, (3, 3), padding='same')	followed_by	Activation('relu')
range	followed_by	BatchNormalization(weights=weights)
.main	call	Conv2D(64, (3, 3))
Activation('softmax')	call	Activation
.main	call	range
categorical_crossentropy	followed_by	range
List	followed_by	GlobalAveragePooling2D
.main	call	categorical_crossentropy
max	followed_by	idxs_to_prune
Input	followed_by	Model
custom_model	call	Model(model.input, self.pool(model.get_layer(index=i).output))
.main	call	Activation('softmax')
insert_fully	call	Dense(512)
.main	call	count_filters
BatchNormalization(weights=weights)	call	BatchNormalization
Dense(512)	call	Dense
Dropout(0.5)	followed_by	Dense(num_classes)
to_categorical	followed_by	Input
Model	followed_by	Flatten()
fit	call	vip
count_filters	call	range
MaxPooling2D(pool_size=(2, 2))	followed_by	Conv2D(64, (3, 3), padding='same')
find_closer_th	call	where
categorical_crossentropy	followed_by	argmax
score_by_filter	call	zeros
insert_fully	call	Activation('relu')
reshape	followed_by	reshape
.main	call	rebuild_net
range	has_arg0	0
VIPPruning.__init__	followed_by	max
fit	call	flatten
Conv2D(activation=config['activation'], activity_regularizer=config['activity_regularizer'], bias_constraint=config['bias_constraint'],bias_regularizer=config['bias_regularizer'], data_format=config['data_format'], dilation_rate=config['dilation_rate'], filters=config['filters'], kernel_constraint=config['kernel_constraint'],kernel_regularizer=config['kernel_regularizer'], kernel_size=config['kernel_size'], name=config['name'], padding=config['padding'], strides=config['strides'], trainable=config['trainable'], use_bias=config['use_bias'], weights=weights)	followed_by	Model
find_closer_th	followed_by	range
compute_flops	followed_by	generate_conv_model
Conv2D(32, (3, 3), padding='same')	call	Conv2D
range	followed_by	sqrt
Model(model.input, self.pool(model.get_layer(index=i).output))	followed_by	List
Conv2D(32, (3, 3))	call	Conv2D
idxs_to_prune	call	fit
Activation('relu')	call	Activation
.main	call	Model
generate_conv_model	call	Model
abs	followed_by	flatten
insert_fully	call	Model
.main	call	to_categorical
categorical_crossentropy	followed_by	frozen_conv2D
.main	call	generate_conv_model
zeros	followed_by	range
Conv2D	has_arg0	64
MaxPooling2D(pool_size=(2, 2))	call	MaxPooling2D
vip	call	range
flatten	call	range
find_closer_th	call	abs
rebuild_net	call	Conv2D(activation=config['activation'], activity_regularizer=config['activity_regularizer'], bias_constraint=config['bias_constraint'],bias_regularizer=config['bias_regularizer'], data_format=config['data_format'], dilation_rate=config['dilation_rate'], filters=config['filters'], kernel_constraint=config['kernel_constraint'],kernel_regularizer=config['kernel_regularizer'], kernel_size=config['kernel_size'], name=config['name'], padding=config['padding'], strides=config['strides'], trainable=config['trainable'], use_bias=config['use_bias'], weights=weights)
.main	call	Conv2D(64, (3, 3), padding='same')
insert_fully	call	Input
custom_model	call	Input
