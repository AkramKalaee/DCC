Flatten()	call	Flatten
count_filters	followed_by	compute_flops
Flatten()	followed_by	Dense(512)
Dense	has_arg0	512
Activation	has_arg0	softmax
where	followed_by	abs
vip	call	sqrt
Dense(10)	call	Dense
find_closer_th	followed_by	range
List	followed_by	GlobalAveragePooling2D
BatchNormalization(weights=weights)	followed_by	Conv2D(activation=config['activation'], activity_regularizer=config[
    'activity_regularizer'], bias_constraint=config['bias_constraint'],
    bias_regularizer=config['bias_regularizer'], data_format=config[
    'data_format'], dilation_rate=config['dilation_rate'], filters=config[
    'filters'], kernel_constraint=config['kernel_constraint'],
    kernel_regularizer=config['kernel_regularizer'], kernel_size=config[
    'kernel_size'], name=config['name'], padding=config['padding'], strides
    =config['strides'], trainable=config['trainable'], use_bias=config[
    'use_bias'], weights=weights)
.main	call	MaxPooling2D(pool_size=(2, 2))
flatten	followed_by	flatten
Conv2D(activation=config['activation'], activity_regularizer=config[
    'activity_regularizer'], bias_constraint=config['bias_constraint'],
    bias_regularizer=config['bias_regularizer'], data_format=config[
    'data_format'], dilation_rate=config['dilation_rate'], filters=config[
    'filters'], kernel_constraint=config['kernel_constraint'],
    kernel_regularizer=config['kernel_regularizer'], kernel_size=config[
    'kernel_size'], name=config['name'], padding=config['padding'], strides
    =config['strides'], trainable=config['trainable'], use_bias=config[
    'use_bias'], weights=weights)	followed_by	Model
.main	call	frozen_conv2D
idxs_to_prune	call	find_closer_th
generate_conv_model	call	range
Model(model.input, self.pool(model.get_layer(index=i).output))	call	Model
Activation('softmax')	followed_by	Model
score_by_filter	call	range
.main	call	compute_flops
range	has_arg0	1
GlobalAveragePooling2D	followed_by	custom_model
VIPPruning.__init__	call	custom_model
.main	call	count_filters
abs	followed_by	argmin
.main	call	Conv2D(64, (3, 3), padding='same')
frozen_conv2D	followed_by	categorical_crossentropy
List	followed_by	Model
Activation('relu')	followed_by	Conv2D(32, (3, 3))
.main	call	Activation('softmax')
Dense(512)	followed_by	Activation('relu')
.main	call	range
.main	call	rebuild_net
fit	call	abs
.main	call	VIPPruning.__init__
.main	call	idxs_to_prune
argmax	has_axis	1
Conv2D	has_arg0	64
.main	call	categorical_crossentropy
MaxPooling2D	has_pool_size	(2, 2)
custom_model	call	Model
insert_fully	call	Activation('relu')
range	has_arg0	0
Activation	has_arg0	relu
find_closer_th	call	range
insert_fully	followed_by	categorical_crossentropy
Conv2D(activation=config['activation'], activity_regularizer=config[
    'activity_regularizer'], bias_constraint=config['bias_constraint'],
    bias_regularizer=config['bias_regularizer'], data_format=config[
    'data_format'], dilation_rate=config['dilation_rate'], filters=config[
    'filters'], kernel_constraint=config['kernel_constraint'],
    kernel_regularizer=config['kernel_regularizer'], kernel_size=config[
    'kernel_size'], name=config['name'], padding=config['padding'], strides
    =config['strides'], trainable=config['trainable'], use_bias=config[
    'use_bias'], weights=weights)	call	Conv2D
idxs_to_prune	followed_by	rebuild_net
Input	followed_by	range
generate_conv_model	call	BatchNormalization(weights=weights)
Input	has_arg0	(32, 32, 3)
Conv2D(64, (3, 3), padding='same')	call	Conv2D
find_closer_th	call	where
idxs_to_prune	call	List
rebuild_net	call	Input
max	followed_by	idxs_to_prune
custom_model	call	Input
Conv2D(64, (3, 3), padding='same')	followed_by	Activation('relu')
compute_flops	call	range
Activation('relu')	call	Activation
fit	call	flatten
range	followed_by	where
Dense(10)	followed_by	Activation('softmax')
rebuild_net	call	Model
range	followed_by	BatchNormalization(weights=weights)
score_by_filter	call	mean
flatten	followed_by	abs
VIPPruning.__init__	followed_by	max
find_closer_th	call	abs
Model	followed_by	Flatten()
to_categorical	followed_by	to_categorical
rebuild_net	followed_by	frozen_conv2D
Dense(num_classes)	call	Dense
generate_conv_model	call	Input
.main	call	to_categorical
insert_fully	call	Dense(num_classes)
compute_flops	followed_by	range
Conv2D	has_padding	same
Model(model.input, self.pool(model.get_layer(index=i).output))	followed_by	List
Conv2D(32, (3, 3), padding='same')	call	Conv2D
.main	call	generate_conv_model
count_filters	call	range
rebuild_net	call	Conv2D(activation=config['activation'], activity_regularizer=config[
    'activity_regularizer'], bias_constraint=config['bias_constraint'],
    bias_regularizer=config['bias_regularizer'], data_format=config[
    'data_format'], dilation_rate=config['dilation_rate'], filters=config[
    'filters'], kernel_constraint=config['kernel_constraint'],
    kernel_regularizer=config['kernel_regularizer'], kernel_size=config[
    'kernel_size'], name=config['name'], padding=config['padding'], strides
    =config['strides'], trainable=config['trainable'], use_bias=config[
    'use_bias'], weights=weights)
generate_conv_model	call	Model
Conv2D(32, (3, 3), padding='same')	followed_by	Activation('relu')
fit	followed_by	List
List	call	range
flatten	call	reshape
Model	followed_by	categorical_crossentropy
Input	followed_by	Model
categorical_crossentropy	followed_by	frozen_conv2D
Input	followed_by	Model(model.input, self.pool(model.get_layer(index=i).output))
Conv2D	has_arg1	(3, 3)
insert_fully	call	Dropout(0.5)
Conv2D(32, (3, 3))	call	Conv2D
.main	call	Conv2D(64, (3, 3))
vip	call	range
Dense(512)	call	Dense
idxs_to_prune	call	fit
range	followed_by	mean
range	followed_by	reshape
.main	call	Activation('relu')
.main	call	Input
to_categorical	followed_by	Input
rebuild_net	call	range
insert_fully	call	Activation('softmax')
zeros	followed_by	range
Conv2D(64, (3, 3))	followed_by	Activation('relu')
score_by_filter	call	zeros
argmax	followed_by	argmax
custom_model	call	Model(model.input, self.pool(model.get_layer(index=i).output))
flatten	followed_by	vip
range	followed_by	sqrt
VIPPruning.__init__	call	List
.main	call	Model
range	followed_by	categorical_crossentropy
Model	call	pool
Dropout(0.5)	call	Dropout
range	followed_by	zeros
range	has_arg1	6
frozen_conv2D	followed_by	insert_fully
abs	followed_by	flatten
find_closer_th	call	zeros
.main	call	Flatten()
Activation('relu')	followed_by	MaxPooling2D(pool_size=(2, 2))
Conv2D(64, (3, 3))	call	Conv2D
idxs_to_prune	call	range
Conv2D	has_arg0	32
find_closer_th	call	argmin
BatchNormalization(weights=weights)	call	BatchNormalization
Conv2D(32, (3, 3))	followed_by	Activation('relu')
insert_fully	call	Dense(512)
fit	call	vip
vip	followed_by	score_by_filter
Activation('relu')	followed_by	Conv2D(64, (3, 3))
fit	call	score_by_filter
.main	call	insert_fully
insert_fully	call	Model
.main	call	Conv2D(32, (3, 3), padding='same')
Dense	has_arg0	10
categorical_crossentropy	followed_by	argmax
insert_fully	call	Flatten()
.main	call	max
reshape	has_arg0	(n_samples, -1)
VIPPruning.__init__	call	GlobalAveragePooling2D
insert_fully	call	Input
categorical_crossentropy	followed_by	range
Dropout	has_arg0	0.5
.main	call	argmax
compute_flops	followed_by	generate_conv_model
custom_model	call	List
Activation('relu')	followed_by	Dropout(0.5)
MaxPooling2D(pool_size=(2, 2))	call	MaxPooling2D
argmax	followed_by	count_filters
MaxPooling2D(pool_size=(2, 2))	followed_by	Flatten()
.main	call	Dense(512)
reshape	followed_by	reshape
MaxPooling2D(pool_size=(2, 2))	followed_by	Conv2D(64, (3, 3), padding='same')
zeros	has_arg0	(p,)
Input	followed_by	Conv2D(32, (3, 3), padding='same')
Dropout(0.5)	followed_by	Dense(num_classes)
.main	call	Dropout(0.5)
rebuild_net	call	BatchNormalization(weights=weights)
range	followed_by	range
Activation('softmax')	call	Activation
.main	call	Conv2D(32, (3, 3))
Dropout(0.5)	followed_by	Dense(10)
List	followed_by	find_closer_th
generate_conv_model	call	Conv2D(activation=config['activation'], activity_regularizer=config[
    'activity_regularizer'], bias_constraint=config['bias_constraint'],
    bias_regularizer=config['bias_regularizer'], data_format=config[
    'data_format'], dilation_rate=config['dilation_rate'], filters=config[
    'filters'], kernel_constraint=config['kernel_constraint'],
    kernel_regularizer=config['kernel_regularizer'], kernel_size=config[
    'kernel_size'], name=config['name'], padding=config['padding'], strides
    =config['strides'], trainable=config['trainable'], use_bias=config[
    'use_bias'], weights=weights)
range	followed_by	VIPPruning.__init__
Dense(num_classes)	followed_by	Activation('softmax')
idxs_to_prune	call	where
flatten	call	range
to_categorical	has_arg0	10
vip	call	zeros
.main	call	Dense(10)
